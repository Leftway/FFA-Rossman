plot_ly(x= as.POSIXct("2015-10-01", format = "%Y-%m-%d") - store$Promo2Since, type = "histogram") %>%
layout(title = "Distribution of Promo2Since",
xaxis = list(title = "Year",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE)))
# Histogram for CompetitionOpenedSince
plot_ly(x= as.POSIXct("2015-10-01", format = "%Y-%m-%d") - store$Promo2Since, type = "histogram") %>%
layout(title = "Distribution of Promo2Since",
xaxis = list(title = "Year",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
# WTFBBQ
# salesByDist <- aggregate(train_store[Sales != 0 & !is.na(CompetitionDistance)]$Sales,
# by = list(train_store[Sales != 0 & !is.na(CompetitionDistance)]$CompetitionDistance), mean)
# colnames(salesByDist) <- c("CompetitionDistance", "MeanSales")
ggplot(train.store, aes(x = CompetitionDistance, y = Sales) +
# WTFBBQ
# salesByDist <- aggregate(train_store[Sales != 0 & !is.na(CompetitionDistance)]$Sales,
# by = list(train_store[Sales != 0 & !is.na(CompetitionDistance)]$CompetitionDistance), mean)
# colnames(salesByDist) <- c("CompetitionDistance", "MeanSales")
ggplot(train.store, aes(x = CompetitionDistance, y = Sales) +
geom_point() + geom_smooth())
# WTFBBQ
# salesByDist <- aggregate(train_store[Sales != 0 & !is.na(CompetitionDistance)]$Sales,
# by = list(train_store[Sales != 0 & !is.na(CompetitionDistance)]$CompetitionDistance), mean)
# colnames(salesByDist) <- c("CompetitionDistance", "MeanSales")
ggplot(train.store, aes(x = CompetitionDistance, y = Sales) +
# WTFBBQ
# salesByDist <- aggregate(train_store[Sales != 0 & !is.na(CompetitionDistance)]$Sales,
# by = list(train_store[Sales != 0 & !is.na(CompetitionDistance)]$CompetitionDistance), mean)
# colnames(salesByDist) <- c("CompetitionDistance", "MeanSales")
ggplot(train.store, aes(x = CompetitionDistance, y = Sales) +
geom_point() + geom_smooth())
geom_point() + geom_smooth()
# WTFBBQ
# salesByDist <- aggregate(train_store[Sales != 0 & !is.na(CompetitionDistance)]$Sales,
# by = list(train_store[Sales != 0 & !is.na(CompetitionDistance)]$CompetitionDistance), mean)
# colnames(salesByDist) <- c("CompetitionDistance", "MeanSales")
ggplot(train.store, aes(x = CompetitionDistance, y = Sales) +
# WTFBBQ
# salesByDist <- aggregate(train_store[Sales != 0 & !is.na(CompetitionDistance)]$Sales,
# by = list(train_store[Sales != 0 & !is.na(CompetitionDistance)]$CompetitionDistance), mean)
# colnames(salesByDist) <- c("CompetitionDistance", "MeanSales")
ggplot(data = train.store, aes(x = CompetitionDistance, y = Sales) +
# WTFBBQ
# salesByDist <- aggregate(train_store[Sales != 0 & !is.na(CompetitionDistance)]$Sales,
# by = list(train_store[Sales != 0 & !is.na(CompetitionDistance)]$CompetitionDistance), mean)
# colnames(salesByDist) <- c("CompetitionDistance", "MeanSales")
ggplot(data = train.store, aes(x = CompetitionDistance, y = Sales)) +
geom_point() + geom_smooth()
# WTFBBQ
# salesByDist <- aggregate(train_store[Sales != 0 & !is.na(CompetitionDistance)]$Sales,
# by = list(train_store[Sales != 0 & !is.na(CompetitionDistance)]$CompetitionDistance), mean)
# colnames(salesByDist) <- c("CompetitionDistance", "MeanSales")
a< - ggplot(data = train.store, aes(x = CompetitionDistance, y = Sales)) +
# WTFBBQ
# salesByDist <- aggregate(train_store[Sales != 0 & !is.na(CompetitionDistance)]$Sales,
# by = list(train_store[Sales != 0 & !is.na(CompetitionDistance)]$CompetitionDistance), mean)
# colnames(salesByDist) <- c("CompetitionDistance", "MeanSales")
a <- ggplot(data = train.store, aes(x = CompetitionDistance, y = Sales)) +
geom_point() + geom_smooth()
plotly(a)
View(a)
# WTFBBQ
# salesByDist <- aggregate(train_store[Sales != 0 & !is.na(CompetitionDistance)]$Sales,
# by = list(train_store[Sales != 0 & !is.na(CompetitionDistance)]$CompetitionDistance), mean)
# colnames(salesByDist) <- c("CompetitionDistance", "MeanSales")
ggplot(data = train.store, aes(x = CompetitionDistance, y = Sales)) +
geom_point() + geom_smooth()
# WTFBBQ
# salesByDist <- aggregate(train_store[Sales != 0 & !is.na(CompetitionDistance)]$Sales,
# by = list(train_store[Sales != 0 & !is.na(CompetitionDistance)]$CompetitionDistance), mean)
# colnames(salesByDist) <- c("CompetitionDistance", "MeanSales")
ggplot(data = train.store, aes(x = CompetitionDistance, y = Sales)) +
geom_point() + geom_smooth()
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,
ggplot2,
lubridate,
plotly,
kableExtra,
zoo,
plotly)
# Create html_df for later stlying
html_df <- function(x){
kable(x) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
}
# WTFBBQ
# salesByDist <- aggregate(train_store[Sales != 0 & !is.na(CompetitionDistance)]$Sales,
# by = list(train_store[Sales != 0 & !is.na(CompetitionDistance)]$CompetitionDistance), mean)
# colnames(salesByDist) <- c("CompetitionDistance", "MeanSales")
ggplot(data = train.store, aes(x = CompetitionDistance, y = Sales)) +
geom_point() + geom_smooth()
geom_point() + geom_smooth()
# WTFBBQ
# salesByDist <- aggregate(train_store[Sales != 0 & !is.na(CompetitionDistance)]$Sales,
# by = list(train_store[Sales != 0 & !is.na(CompetitionDistance)]$CompetitionDistance), mean)
# colnames(salesByDist) <- c("CompetitionDistance", "MeanSales")
ggplot(data = train.store, aes(x = log(CompetitionDistance), y = log(Sales)) +
# WTFBBQ
# salesByDist <- aggregate(train_store[Sales != 0 & !is.na(CompetitionDistance)]$Sales,
# by = list(train_store[Sales != 0 & !is.na(CompetitionDistance)]$CompetitionDistance), mean)
# colnames(salesByDist) <- c("CompetitionDistance", "MeanSales")
ggplot(data = train.store, aes(x = log(CompetitionDistance), y = log(Sales)) +
# WTFBBQ
# salesByDist <- aggregate(train_store[Sales != 0 & !is.na(CompetitionDistance)]$Sales,
# by = list(train_store[Sales != 0 & !is.na(CompetitionDistance)]$CompetitionDistance), mean)
# colnames(salesByDist) <- c("CompetitionDistance", "MeanSales")
ggplot(data = train.store, aes(x = CompetitionDistance, y = Sales)) +
geom_point() + geom_smooth() + scale_x_log10()
# WTFBBQ
# salesByDist <- aggregate(train_store[Sales != 0 & !is.na(CompetitionDistance)]$Sales,
# by = list(train_store[Sales != 0 & !is.na(CompetitionDistance)]$CompetitionDistance), mean)
# colnames(salesByDist) <- c("CompetitionDistance", "MeanSales")
ggplot(data = train.store, aes(x = CompetitionDistance, y = Sales)) +
ggplot(data = train.store, aes(x = CompetitionDistance, y = Sales)) +
geom_point() + geom_smooth() + scale_x_log10()
ggplot(data = train.store, aes(x = CompetitionDistance, y = Sales)) +
geom_point() + geom_smooth() + scale_x_log10() + scale_y_log()
ggplot(data = train.store, aes(x = CompetitionDistance, y = Sales)) +
geom_point() + geom_smooth() + scale_x_log10() + scale_y_log10()
ggplot(data = train.store, aes(x = CompetitionDistance, y = Sales)) +
geom_point() + geom_smooth()
salesByDist <- aggregate(train_store[Sales != 0 & !is.na(CompetitionDistance)]$Sales,
by = list(train_store[Sales != 0 & !is.na(CompetitionDistance)]$CompetitionDistance), mean)
salesByDist <- aggregate(train.store[Sales != 0 & !is.na(CompetitionDistance)]$Sales,
by = list(train.store[Sales != 0 & !is.na(CompetitionDistance)]$CompetitionDistance), mean)
salesByDist <- aggregate(train.store$Sales,
by = list(train.store$CompetitionDistance), mean)
salesByDist
salesbydist <- training.store %>% group_by(CompetitionDistance)
salesbydist <- training.stores %>% group_by(CompetitionDistance)
salesbydist <- train.store %>% group_by(CompetitionDistance)
salesbydist
salesbydist <- train.store %>% group_by(CompetitionDistance)
salesbydist
train.store %>% group_by(CompetitionDistance)
train.store %>% group_by(CompetitionDistance)
train.store %>% group_by(CompetitionDistance) %>% summarize(Mean = mean(price, na.rm=TRUE)))
train.store %>% group_by(CompetitionDistance) %>% summarize(Mean = mean(price, na.rm=TRUE))
train.store %>% group_by(CompetitionDistance) %>% summarize(Mean = mean(sales, na.rm=TRUE))
train.store %>% group_by(CompetitionDistance) %>% summarize(Mean = mean(sale, na.rm=TRUE))
train.store %>% group_by(CompetitionDistance) %>% summarize(Mean = mean(Sales, na.rm=TRUE))
salesbydist <- train.store %>% group_by(CompetitionDistance) %>% summarize(Mean = mean(Sales, na.rm=TRUE))
salesbydist
salesbydist <- train.store %>% group_by(CompetitionDistance) %>% summarize(MeanSales = mean(Sales, na.rm=TRUE))
salesbydist
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales)) +
geom_point() + geom_smooth()
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales)) +
geom_point() + geom_smooth() + scale_x_log10()
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales)) +
geom_point() + geom_smooth() + scale_x_log10() + scale_y_log10()
ggplot(train.store, aes(x = CompetitionDistance, y = Sales)) +
geom_point() + geom_smooth()
# salesbydist scatterplot
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales)) +
geom_point() + geom_smooth() + scale_x_log10() + scale_y_log10()
View(salesbydist)
pacman::p_load(tidyverse,
ggplot2,
lubridate,
plotly,
kableExtra,
zoo,
plotly,
scale)
pacman::p_load(tidyverse,
ggplot2,
lubridate,
plotly,
kableExtra,
zoo,
plotly,
Scale)
# salesbydist scatterplot
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales)) +
geom_point() + geom_smooth() + scale_x_log10() + scale_y_log10() +
scale_x_continuous(labels = comma)
# salesbydist scatterplot
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales)) +
geom_point() + geom_smooth() + scale_x_log10() + scale_y_log10() +
scale_x_continuous(name="Fluorescent intensity/arbitrary units", labels = comma)
# salesbydist scatterplot
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales)) +
geom_point() + geom_smooth() + scale_x_log10() + scale_y_log10() +
scale_y_continuous(name="Fluorescent intensity/arbitrary units", labels = scales::comma)
# salesbydist scatterplot
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales)) +
geom_point() + geom_smooth() + scale_x_log10() + scale_y_log10() +
scale_x_continuous(name="Fluorescent intensity/arbitrary units", labels = scales::comma)
# salesbydist scatterplot
ggplot(salesbydist, aes(x = log(CompetitionDistance), y = MeanSales)) +
geom_point() + geom_smooth() + scale_x_log10() + scale_y_log10() +
scale_x_continuous(name="Fluorescent intensity/arbitrary units", labels = scales::comma)
geom_point() + geom_smooth()
# salesbydist scatterplot
ggplot(salesbydist, aes(x = CompetitionDistance, y = log(MeanSales)) +
# salesbydist scatterplot
ggplot(salesbydist, aes(x = CompetitionDistance, y = log(MeanSales)) +
ggplot(salesbydist, aes(x = CompetitionDistance, y = log(MeanSales)) +
geom_point() + geom_smooth()
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,
ggplot2,
lubridate,
plotly,
kableExtra,
zoo,
plotly,
Scale)
# Create html_df for later stlying
html_df <- function(x){
kable(x) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
}
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,
ggplot2,
lubridate,
plotly,
kableExtra,
zoo,
plotly,
Scale)
# Create html_df for later stlying
html_df <- function(x){
kable(x) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
}
# salesbydist scatterplot
ggplot(salesbydist, aes(x = CompetitionDistance, y = log(MeanSales)) +
# salesbydist scatterplot
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales) +
# salesbydist scatterplot
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales) +
# salesbydist scatterplot
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales +
# salesbydist scatterplot
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales) +
# salesbydist scatterplot
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales)) +
geom_point() + geom_smooth() + scale_x_log10() + scale_y_log10()
# salesbydist scatterplot
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales)) +
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales)) +
geom_point() + geom_smooth() + scale_x_log10() + scale_y_log10()
ggplot(salesbydist, aes(x = log(CompetitionDistance), y = MeanSales)) +
geom_point() + geom_smooth() + scale_y_log10()
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales)) +
geom_point() + geom_smooth() + scale_y_log10() + scale_x_log10()
ggplot(salesbydist, aes(x = CompetitionDistance, y = log(MeanSales))) +
geom_point() + geom_smooth() + scale_x_log10()
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales)) +
geom_point() + geom_smooth() + scale_x_log10() + scale_y_log10()
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales)) +
geom_point() + geom_smooth() + scale_x_log10() + scale_y_log10() + scale_x_continuous(name="Fluorescent intensity/arbitrary units", labels = scales::comma)
# MeanSales by CompetitionDistance
salesbydist <- train.store %>% group_by(CompetitionDistance) %>% summarize(MeanSales = mean(Sales, na.rm=TRUE))
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales)) +
geom_point() + geom_smooth() + scale_x_log10() + scale_y_log10()
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,
ggplot2,
lubridate,
plotly,
kableExtra,
zoo,
plotly,
Scale,
forecast)
# Create html_df for later stlying
html_df <- function(x){
kable(x) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
}
training.swr <- step(training, direction = "both")
training.swr <- step(train.store, direction = "both")
training.swr <- step(train.store, direction = "both")
training.swr <- step(train.store, direction = "both")
View(train)
# Run lm first
train.mlm <- lm(Sales ~., data = train.stores)
# Run lm first
train.mlm <- lm(Sales ~., data = train.store)
str(train.store)
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
PromoInterval             = as.factor(PromoInterval))
# Run lm first
train.mlm <- lm(Sales ~., data = train.store)
str(train.store)
# Run lm first
train.mlm <- lm(Sales ~., data = train.store)
View(train.store)
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,
ggplot2,
lubridate,
plotly,
kableExtra,
zoo,
plotly,
Scale,
forecast)
# Create html_df for later stlying
html_df <- function(x){
kable(x) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
}
# Import train.csv, test.csv and store.csv
train <- read.csv("train.csv", stringsAsFactors = F)
test <- read.csv("test.csv", stringsAsFactors = F)
store <- read.csv("store.csv", stringsAsFactors = F)
str(train)
str(test)
str(store)
dim(train)
dim(test)
dim(store)
# Test
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open)) %>% html_df()
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# c. Check if NA has been replaced:
sum(is.na(test$Open))
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday))
#Day                       = as.integer(format(train$Date, "%d")), # New variable 1
#Month                     = as.integer(format(train$Date, "%m")), # New variable 2
#Year                      = as.integer(format(train$Date, "%Y"))) # New variable 3
str(train)
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday))
#Day                       = as.integer(format(test$Date, "%d")),  # New variable 1
#Month                     = as.integer(format(test$Date, "%m")),  # New variable 2
#Year                      = as.integer(format(test$Date, "%Y")))  # New variable 3
str(test)
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
PromoInterval             = as.factor(PromoInterval))
str(store)
train.store <- merge(train, store, by = "Store")
# Combine year and month into one date variable:
train.store$CompetitionOpenSince <-as.yearmon(paste(store$CompetitionOpenSinceYear,
store$CompetitionOpenSinceMonth, sep = "-"))
# Combine year and month into one date variable:
store$CompetitionOpenSince <-as.yearmon(paste(store$CompetitionOpenSinceYear,
store$CompetitionOpenSinceMonth, sep = "-"))
# P.S: yearmon functon creates a numeric vector interpreted in "years" and fractions of years. e.g. 1961.5 = June 1961.
# Histogram for CompetitionOpenedSince
plot_ly(x= store$CompetitionOpenSince, type = "histogram") %>%
layout(title = "Distribution of CompetitionOpenedSince",
xaxis = list(title = "Year",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
# Combine year and month into one date variable:
store$Promo2Since <- as.POSIXct(paste(store$Promo2SinceYear,
store$Promo2SinceWeek, 1, sep = "-"),
format = "%Y-%U-%u")
hist(as.numeric(as.POSIXct("2015-10-01", format = "%Y-%m-%d") - store$Promo2Since),
100, main = "Days since start of promo2")
# Histogram for Promo2Since (in days)
plot_ly(x= as.POSIXct("2015-10-01", format = "%Y-%m-%d") - store$Promo2Since, type = "histogram") %>%
layout(title = "Distribution of Promo2Since",
xaxis = list(title = "Days",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
train.store <- merge(train, store, by = "Store")
# Run lm first
train.mlm <- lm(Sales ~. -Store -Date -CompetitionOpenSinceMonth -CompetitionOpenSinceYear
-Promo2SinceWeek -Promo2SinceYear,  data = train.store)
# Run lm first
train.mlm <- lm(Sales ~. -Store -Date -CompetitionOpenSinceMonth -CompetitionOpenSinceYear
-Promo2SinceWeek -Promo2SinceYear,  data = train.store)
train.store2 %>% select(DayOfWeek, Sales, Customers, Open, Promo, StateHoliday, SchoolHoliday, StoreType,
Assortment, CompetitionDistance, Promo2, PromoInterval, CompetitionOpenSince, Promo2Since)
train.store2 <- train.store %>% select(DayOfWeek, Sales, Customers, Open, Promo, StateHoliday, SchoolHoliday, StoreType,
Assortment, CompetitionDistance, Promo2, PromoInterval, CompetitionOpenSince, Promo2Since)
train.store2 <- train.store %>% select(DayOfWeek, Sales)
train.store2 <- train.store %>% select(Sales
train.store2 <- train.store %>% select(Sales)
train.store2 <- train.store %>% Select(Sales)
train.store2 <- train.store %>% select(Sales)
train.store2 <- train.store %>% select(Sales)
train.store2 <- select(train.store, Sales)
train.store %>% select(Sales)
train %>% select(Sales)
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,
ggplot2,
lubridate,
plotly,
kableExtra,
zoo,
plotly,
Scale,
forecast)
# Create html_df for later stlying
html_df <- function(x){
kable(x) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
}
train.store %>% select(Sales)
train.store2 <- train.store %>% dplyr:: select(DayOfWeek, Sales, Customers, Open, Promo,
StateHoliday, StoreType, Assortment, CompetitionDistance,
Promo2, PromoInterval, CompetitionOpenSince, Promo2Since)
train.store2 <- train.store %>% dplyr:: select(
DayOfWeek, #1
Sales,     #2
Customers, #3
Open,      #4
Promo,     #5
StateHoliday, #6
SchoolHoliday, #7
StoreType,
Assortment,
CompetitionDistance,
Promo2,
PromoInterval,
CompetitionOpenSince,
Promo2Since)
# Run lm first
train.mlm <- lm(Sales ~. -Store -Date -CompetitionOpenSinceMonth -CompetitionOpenSinceYear
-Promo2SinceWeek -Promo2SinceYear,  data = train.store2)
# Run lm first
train.mlm <- lm(Sales ~.  data = train.store2)
# Run lm first
train.mlm <- lm(Sales ~.,  data = train.store2)
str(train.store2)
train.store2 <- train.store %>% dplyr:: select(
DayOfWeek, #1
Sales,     #2
Customers, #3
Open,      #4
Promo,     #5
StateHoliday, #6
SchoolHoliday, #7
StoreType,   #8
Assortment,  #9
CompetitionDistance,  #10
Promo2,               #11
PromoInterval,        #12
CompetitionOpenSince) #13
# Run lm first
train.mlm <- lm(Sales ~.,  data = train.store2)
training.swr <- step(train.store2, direction = "both")
training.swr <- step(train.mlm, direction = "both")
summary(training.swr)
# MeanSales by CompetitionDistance
salesbydist <- train.store %>% group_by(CompetitionDistance) %>% summarize(MeanSales = mean(Sales, na.rm=TRUE))
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,
ggplot2,
lubridate,
plotly,
kableExtra,
zoo,
plotly,
Scale,
forecast)
# Create html_df for later stlying
html_df <- function(x){
kable(x) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
}
summarize
# MeanSales by CompetitionDistance
salesbydist <- train.store %>% group_by(CompetitionDistance) %>% summarize(MeanSales = mean(Sales, na.rm=TRUE))
# MeanSales by CompetitionDistance
salesbydist <- train.store %>% group_by(CompetitionDistance) %>% summarize(MeanSales = mean(Sales, na.rm=TRUE))
# MeanSales by CompetitionDistance
salesbydist <- train.store %>% group_by(CompetitionDistance) %>% summarise(MeanSales = mean(Sales, na.rm=TRUE))
# MeanSales by CompetitionDistance
salesbydist <- train.store %>% group_by(CompetitionDistance) %>% summarise(MeanSales = mean(Sales, na.rm=TRUE))
## NOTE: Plotting without mean makes everthing too cluttered. Code below can't see shit. Followed online guide.
## ggplot(train.store, aes(x = CompetitionDistance, y = Sales)) + geom_point() + geom_smooth()
# salesbydist scatterplot
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales)) +
geom_point() + geom_smooth() + scale_x_log10() + scale_y_log10()
