DayofYear                 = as.integer(as.POSIXlt(Date)$yday),
Week                      = as.integer( format(Date+3, "%U"))))))
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
PromoInterval             = as.factor(PromoInterval),
CompetitionOpenSinceMonth = as.numeric(CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = as.numeric(CompetitionOpenSinceYear))
View(train)
# Train
train %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# a. Impute NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# b. Check if NA has been replaced:
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
train.store <- merge(train, store, by = "Store")
test.store <- merge(test, store, by = "Store")
# rm(store)
# rm(test)
# rm(train)
# Previous stored variables removed so only correct data set is used.
# Histogram for CompetitionOpenedSince
plot_ly(x= train.store$CompetitionOpenSince, type = "histogram") %>%
layout(title = "Distribution of CompetitionOpenedSince",
xaxis = list(title = "Year",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
# a. Create new date variables
store <- store %>%
mutate(CompetitionOpenSince = as.yearmon(paste(store$CompetitionOpenSinceYear, store$CompetitionOpenSinceMonth, sep = "-")),
Promo2Since = as.POSIXct(paste(store$Promo2SinceYear,store$Promo2SinceWeek, 1, sep = "-"),format = "%Y-%U-%u"))
# P.S: yearmon functon creates a numeric vector interpreted in "years" and fractions of years. e.g. 1961.5 = June 1961.
# b. Remove redundant date variables
store <- store %>% dplyr::select(-c(Promo2SinceWeek, Promo2SinceYear, CompetitionOpenSinceMonth, CompetitionOpenSinceYear))
train.store <- merge(train, store, by = "Store")
test.store <- merge(test, store, by = "Store")
# rm(store)
# rm(test)
# rm(train)
# Previous stored variables removed so only correct data set is used.
# Histogram for CompetitionOpenedSince
plot_ly(x= train.store$CompetitionOpenSince, type = "histogram") %>%
layout(title = "Distribution of CompetitionOpenedSince",
xaxis = list(title = "Year",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
# Initialize mice algorithm where it use information from other variables in the dataset to predict and impute the missing values
init = mice(store, maxit = 0)
meth = init$method
predM = init$predictorMatrix
# Store ID variable does not have any predictive value, Select the BMI variable to not be included as predictor during imputation
predM[, c("Store")] = 0
# Specify methods for inputing values
meth[c("CompetitionOpenSinceMonth")]="norm"
meth[c("CompetitionOpenSinceYear")]="norm"
meth[c("Promo2SinceWeek")]="norm"
meth[c("Promo2SinceYear")]="norm"
# Run multiple imputation
set.seed(111)
imputed = mice(store, method=meth, predictorMatrix=predM, m=10)
# Initialize mice algorithm where it use information from other variables in the dataset to predict and impute the missing values
init = mice(store, maxit = 0)
meth = init$method
predM = init$predictorMatrix
# Store ID variable does not have any predictive value, Select the BMI variable to not be included as predictor during imputation
predM[, c("Store")] = 0
# Specify methods for inputing values
meth[c("CompetitionOpenSinceMonth")]="norm"
meth[c("CompetitionOpenSinceYear")]="norm"
meth[c("Promo2SinceWeek")]="norm"
meth[c("Promo2SinceYear")]="norm"
# Run multiple imputation
set.seed(111)
imputed = mice(store, method=meth, predictorMatrix=predM, m=10)
>>>>>>> master
# Import train.csv, test.csv and store.csv
train <- read.csv("train.csv", stringsAsFactors = F)
test <- read.csv("test.csv", stringsAsFactors = F)
store <- read.csv("store.csv", stringsAsFactors = F)
<<<<<<< HEAD
train <- train %>%
mutate(week = week(as.Date(Date)), year = year(as.Date(Date)), weekM = epiweek(as.Date(Date)),
week = case_when(
week == 1 ~ "01",
week == 2 ~ "02",
week == 3 ~ "03",
week == 4 ~ "04",
week == 5 ~ "05",
week == 6 ~ "06",
week == 7 ~ "07",
week == 8 ~ "08",
week == 9 ~ "09",
week == week ~ as.character(week)
),
week_year = paste0(year, "W", week))
test <- test %>%
mutate(week = week(as.Date(Date)), year = year(as.Date(Date)), weekM = isoweek(as.Date(Date)),
week = case_when(
week == 1 ~ "01",
week == 2 ~ "02",
week == 3 ~ "03",
week == 4 ~ "04",
week == 5 ~ "05",
week == 6 ~ "06",
week == 7 ~ "07",
week == 8 ~ "08",
week == 9 ~ "09",
week == week ~ as.character(week)
),
week_year = paste0(year, "W", week))
#cleaning of missing data in store.csv
store <- store %>%
mutate(CompetitionOpenSinceMonth=ifelse(is.na(CompetitionOpenSinceMonth),median(CompetitionOpenSinceMonth,na.rm=T), CompetitionOpenSinceMonth),
CompetitionOpenSinceYear=ifelse(is.na(CompetitionOpenSinceYear),median(CompetitionOpenSinceYear,na.rm=T), CompetitionOpenSinceYear),
Promo2SinceYear=ifelse(is.na(Promo2SinceYear),0, Promo2SinceYear),
Promo2SinceWeek=ifelse(is.na(Promo2SinceWeek),0, Promo2SinceWeek))
#calculate average sales by store-type-assort
train.df <- train %>%
group_by(Store, week_year) %>%
mutate(store_avg=mean(Sales, rm.na=T)) %>%
ungroup()
#select the first average sales data for each store, week_year
train.df <- train.df %>%
group_by(Store, week_year) %>%
slice(1) %>%
select(week_year,Store,store_avg,week) %>%
ungroup()
train.dy <-
train.df %>%
group_by(Store) %>%
mutate(
sales_gr = store_avg / lag(store_avg) - 1,
sales_d = store_avg - lag(store_avg),
sales_yoy = store_avg/lag(store_avg,53) -1
)
multi_lag <- function(train.dy, lags, var, ext=""){
lag_names <- paste0(var,ext,lags)
lag_funs <- setNames(paste("dplyr::lag(.,",lags,")"), lag_names)
train.dy %>% group_by(Store) %>% mutate_at(vars(var), funs_(lag_funs)) %>% ungroup()
}
corr_store_avg <- multi_lag(train.dy, 1:53, "store_avg")
corr_sales_d <- multi_lag(train.dy, 1:53, "sales_d")
corr_sales_gr <- multi_lag(train.dy, 1:53, "sales_gr")
View(corr_sales_gr)
corr_store_avg <- multi_lag(train.dy, 1:53, "store_avg")[,-c(1:7)]
View(corr_store_avg)
View(corr_store_avg)
corr_store_avg <- multi_lag(train.dy, 1:53, "store_avg")[,-c(1:7)]
corr_sales_d <- multi_lag(train.dy, 1:53, "sales_d")[,-c(1:7)]
corr_sales_gr <- multi_lag(train.dy, 1:53, "sales_gr")[,-c(1:7)]
=======
# a. Impute NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# b. Check if NA has been replaced:
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,     ggplot2,       lubridate,             plotly,
mice,          kableExtra,    zoo,                   Scale,
forecast,      rpart,         caret,                 e1071,       mice)
# Create html_df for later stlying
html_df <- function(x){ kable(x) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")}
# a. Impute NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# b. Check if NA has been replaced:
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# Initialize mice algorithm where it use information from other variables in the dataset to predict and impute the missing values
init = mice(store, maxit = 0)
meth = init$method
predM = init$predictorMatrix
# Store ID variable does not have any predictive value, Select the BMI variable to not be included as predictor during imputation
predM[, c("Store")] = 0
# Specify methods for inputing values
meth[c("CompetitionOpenSinceMonth")]="norm"
meth[c("CompetitionOpenSinceYear")]="norm"
meth[c("Promo2SinceWeek")]="norm"
meth[c("Promo2SinceYear")]="norm"
# Run multiple imputation
set.seed(111)
imputed = mice(store, method=meth, predictorMatrix=predM, m=10)
# Replace store with inputed missing value dataset
store <- complete(imputed)
store$CompetitionOpenSinceMonth <- round(store$CompetitionOpenSinceMonth, digits = 0)
store$CompetitionOpenSinceYear <- round(store$CompetitionOpenSinceYear, digits = 0)
store$Promo2SinceWeek <- round(store$Promo2SinceWeek, digits = 0)
store$Promo2SinceYear <- round(store$Promo2SinceYear, digits = 0)
store <- store %>%
mutate(CompetitionOpenSinceMonth = replace(CompetitionOpenSinceMonth, CompetitionOpenSinceMonth<1, 1),
CompetitionOpenSinceMonth = replace(CompetitionOpenSinceMonth, CompetitionOpenSinceMonth>12, 12),
CompetitionOpenSinceYear = replace(CompetitionOpenSinceYear, CompetitionOpenSinceYear>2015, 2015),
Promo2SinceWeek = replace(Promo2SinceWeek, Promo2SinceWeek<1, 1),
Promo2SinceWeek = replace(Promo2SinceWeek, Promo2SinceWeek>50, 50),
Promo2SinceYear = replace(Promo2SinceYear, Promo2SinceYear<2009, 2009),
Promo2SinceYear = replace(Promo2SinceYear, Promo2SinceYear>2015, 2015)
)
# Last check for NAs
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>%
row_spec(c(4,5,6,8,9), bold = T, color = "red")
# a. Create new date variables
store <- store %>%
mutate(CompetitionOpenSince = as.yearmon(paste(store$CompetitionOpenSinceYear, store$CompetitionOpenSinceMonth, sep = "-")),
Promo2Since = as.POSIXct(paste(store$Promo2SinceYear,store$Promo2SinceWeek, 1, sep = "-"),format = "%Y-%U-%u"))
# P.S: yearmon functon creates a numeric vector interpreted in "years" and fractions of years. e.g. 1961.5 = June 1961.
# b. Remove redundant date variables
store <- store %>% dplyr::select(-c(Promo2SinceWeek, Promo2SinceYear, CompetitionOpenSinceMonth, CompetitionOpenSinceYear))
train.store <- merge(train, store, by = "Store")
test.store <- merge(test, store, by = "Store")
# rm(store)
# rm(test)
# rm(train)
# Previous stored variables removed so only correct data set is used.
# Histogram for CompetitionOpenedSince
plot_ly(x= train.store$CompetitionOpenSince, type = "histogram") %>%
layout(title = "Distribution of CompetitionOpenedSince",
xaxis = list(title = "Year",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
# MeanSales by CompetitionDistance
salesbydist <- train.store %>% group_by(CompetitionDistance) %>% summarise(MeanSales = mean(Sales, na.rm=TRUE))
## NOTE: Plotting without mean makes everthing too cluttered. Code below can't see shit. Followed online guide.
## ggplot(train.store, aes(x = CompetitionDistance, y = Sales)) + geom_point() + geom_smooth()
# salesbydist scatterplot
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales)) +
geom_point() + geom_smooth() + scale_x_log10() + scale_y_log10()
>>>>>>> master
#Seasonality of Sales distribution
train.store %>%
group_by(Week, Store) %>%
mutate(sales = mean(Sales)) %>%
dplyr::slice(1) %>%
ungroup() %>%
ggplot(aes(y=Sales, x=Week, color=factor(Store))) +
geom_line() + xlab("Week") + ylab("Weekly Sales") +
theme(legend.position = "none")
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,     ggplot2,       lubridate,             plotly,
kableExtra,    zoo,                   Scale,
forecast,      rpart,         caret,                 e1071,
mice,          stringr)
# Histogram of sales distribution
qplot(Sales, data = train.store, bins = 50, main = "Right skewed distribution")
train.store <- merge(train, store, by = "Store")
test.store <- merge(test, store, by = "Store")
qplot(Sales, data = train.store, bins = 50, main = "Right skewed distribution")
qplot(Sales - lag(Sales), data = train.store, bins = 50, main = "Almost normal distribution")
train.store %>%
group_by(Week, Store) %>%
mutate(sales = mean(Sales)) %>%
dplyr::slice(1) %>%
ungroup() %>%
ggplot(aes(y=Sales, x=Week, color=factor(Store))) +
geom_line() + xlab("Week") + ylab("Weekly Sales") +
theme(legend.position = "none")
#Seasonality of Sales distribution
train %>%
group_by(Week, Store) %>%
mutate(sales = mean(Sales)) %>%
dplyr::slice(1) %>%
ungroup() %>%
ggplot(aes(y=Sales, x=Week, color=factor(Store))) +
geom_line() + xlab("Week") + ylab("Weekly Sales") +
theme(legend.position = "none")
View(train)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,     ggplot2,       lubridate,             plotly,
kableExtra,    zoo,                   Scale,
forecast,      rpart,         caret,                 e1071,
mice,          stringr)
# Create html_df for later stlying
html_df <- function(x){ kable(x) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")}
train <- read.csv("train.csv", stringsAsFactors = F)
test <- read.csv("test.csv", stringsAsFactors = F)
store <- read.csv("store.csv", stringsAsFactors = F)
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday),
Month                     = as.integer(format(Date, "%m")),
Year                      = as.integer(format(Date, "%y")),
Day                       = as.integer(format(Date, "%d")),
DayofYear                 = as.integer(as.POSIXlt(Date)$yday),
Week                      = as.integer(format(Date+3, "%U")))
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday),
Month                     = as.integer(format(Date, "%m"),
Year                      = as.integer(format(Date, "%y"),
Day                       = as.integer(format(Date, "%d"),
DayofYear                 = as.integer(as.POSIXlt(Date)$yday),
Week                      = as.integer( format(Date+3, "%U"))))))
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
CompetitionOpenSinceMonth = as.numeric(CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = as.numeric(CompetitionOpenSinceYear))
#OHE for PromoInterval
store <- cbind.data.frame(store,str_split_fixed(store$PromoInterval, ",", 12))
colnames(store)[11:22] <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
store$Jan <- ifelse(grepl("Jan",store$PromoInterval),1,0)
store$Feb <- ifelse(grepl("Feb",store$PromoInterval),1,0)
store$Mar <- ifelse(grepl("Mar",store$PromoInterval),1,0)
store$Apr <- ifelse(grepl("Apr",store$PromoInterval),1,0)
store$May <- ifelse(grepl("May",store$PromoInterval),1,0)
store$Jun <- ifelse(grepl("Jun",store$PromoInterval),1,0)
store$Jul <- ifelse(grepl("Jul",store$PromoInterval),1,0)
store$Aug <- ifelse(grepl("Aug",store$PromoInterval),1,0)
store$Sep <- ifelse(grepl("Sep",store$PromoInterval),1,0)
store$Oct <- ifelse(grepl("Oct",store$PromoInterval),1,0)
store$Nov <- ifelse(grepl("Nov",store$PromoInterval),1,0)
store$Dec <- ifelse(grepl("Dec",store$PromoInterval),1,0)
store <- store[,-10]
# a. Impute NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# b. Check if NA has been replaced:
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
init = mice(store, maxit = 0)
meth = init$method
predM = init$predictorMatrix
# Store ID variable does not have any predictive value, Select the BMI variable to not be included as predictor during imputation
predM[, c("Store")] = 0
# Specify methods for inputing values
meth[c("CompetitionOpenSinceMonth")]="norm"
meth[c("CompetitionOpenSinceYear")]="norm"
meth[c("Promo2SinceWeek")]="norm"
meth[c("Promo2SinceYear")]="norm"
# Run multiple imputation
set.seed(111)
imputed = mice(store, method=meth, predictorMatrix=predM, m=10)
# Replace store with inputed missing value dataset
store <- complete(imputed)
store$CompetitionOpenSinceMonth <- round(store$CompetitionOpenSinceMonth, digits = 0)
store$CompetitionOpenSinceYear <- round(store$CompetitionOpenSinceYear, digits = 0)
store$Promo2SinceWeek <- round(store$Promo2SinceWeek, digits = 0)
store$Promo2SinceYear <- round(store$Promo2SinceYear, digits = 0)
store <- store %>%
mutate(CompetitionOpenSinceMonth = replace(CompetitionOpenSinceMonth, CompetitionOpenSinceMonth<1, 1),
CompetitionOpenSinceMonth = replace(CompetitionOpenSinceMonth, CompetitionOpenSinceMonth>12, 12),
CompetitionOpenSinceYear = replace(CompetitionOpenSinceYear, CompetitionOpenSinceYear>2015, 2015),
Promo2SinceWeek = replace(Promo2SinceWeek, Promo2SinceWeek<1, 1),
Promo2SinceWeek = replace(Promo2SinceWeek, Promo2SinceWeek>50, 50),
Promo2SinceYear = replace(Promo2SinceYear, Promo2SinceYear<2009, 2009),
Promo2SinceYear = replace(Promo2SinceYear, Promo2SinceYear>2015, 2015)
)
# Last check for NAs
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>%
row_spec(c(4,5,6,8,9), bold = T, color = "red")
plot(train$Date, type = "l")
# 1. Finding all combinations of stores and dates
allStoresAndDates <- expand.grid(unique(train$Store), unique(train$Date))
# 2. Naming the two columns in the newly created dataframe for step 3
names(allStoresAndDates) <- c("Store", "Date")
# 3. Extract stores with missing dates and consequently sales data.
missingDatesForStores <-  anti_join(allStoresAndDates, train, by = c("Store", "Date"))
# a. Create new date variables
store <- store %>%
mutate(CompetitionOpenSince = as.yearmon(paste(store$CompetitionOpenSinceYear, store$CompetitionOpenSinceMonth, sep = "-")),
Promo2Since = as.POSIXct(paste(store$Promo2SinceYear,store$Promo2SinceWeek, 1, sep = "-"),format = "%Y-%U-%u"))
# b. Remove redundant date variables
store <- store %>% dplyr::select(-c(Promo2SinceWeek, Promo2SinceYear, CompetitionOpenSinceMonth, CompetitionOpenSinceYear))
train.store <- merge(train, store, by = "Store")
train.store <- merge(train, store, by = "Store")
test.store <- merge(test, store, by = "Store")
# First plot
train.store %>% group_by(DayOfWeek, Open) %>% tally() %>%
ggplot(aes(x =DayOfWeek, y=n, fill = Open)) +
geom_bar(stat="identity")
# PromotionInterval
ggplot(train.store, aes(x = factor(PromoInterval), y = Sales, color = PromoInterval)) +
geom_col() +
ggtitle("Sales by PromoInterval")
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
CompetitionOpenSinceMonth = as.numeric(CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = as.numeric(CompetitionOpenSinceYear))
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
CompetitionOpenSinceMonth = as.numeric(CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = as.numeric(CompetitionOpenSinceYear))
store <- read.csv("store.csv", stringsAsFactors = F)
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
CompetitionOpenSinceMonth = as.numeric(CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = as.numeric(CompetitionOpenSinceYear))
#OHE for PromoInterval
store <- cbind.data.frame(store,str_split_fixed(store$PromoInterval, ",", 12))
colnames(store)[11:22] <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
store$Jan <- ifelse(grepl("Jan",store$PromoInterval),1,0)
store$Feb <- ifelse(grepl("Feb",store$PromoInterval),1,0)
store$Mar <- ifelse(grepl("Mar",store$PromoInterval),1,0)
store$Apr <- ifelse(grepl("Apr",store$PromoInterval),1,0)
store$May <- ifelse(grepl("May",store$PromoInterval),1,0)
store$Jun <- ifelse(grepl("Jun",store$PromoInterval),1,0)
store$Jul <- ifelse(grepl("Jul",store$PromoInterval),1,0)
store$Aug <- ifelse(grepl("Aug",store$PromoInterval),1,0)
store$Sep <- ifelse(grepl("Sep",store$PromoInterval),1,0)
store$Oct <- ifelse(grepl("Oct",store$PromoInterval),1,0)
store$Nov <- ifelse(grepl("Nov",store$PromoInterval),1,0)
store$Dec <- ifelse(grepl("Dec",store$PromoInterval),1,0)
# Store
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
init = mice(store, maxit = 0)
meth = init$method
predM = init$predictorMatrix
# Store ID variable does not have any predictive value, Select the BMI variable to not be included as predictor during imputation
predM[, c("Store")] = 0
# Specify methods for inputing values
meth[c("CompetitionOpenSinceMonth")]="norm"
meth[c("CompetitionOpenSinceYear")]="norm"
meth[c("Promo2SinceWeek")]="norm"
meth[c("Promo2SinceYear")]="norm"
# Run multiple imputation
set.seed(111)
imputed = mice(store, method=meth, predictorMatrix=predM, m=10)
# Replace store with inputed missing value dataset
store <- complete(imputed)
store$CompetitionOpenSinceMonth <- round(store$CompetitionOpenSinceMonth, digits = 0)
store$CompetitionOpenSinceYear <- round(store$CompetitionOpenSinceYear, digits = 0)
store$Promo2SinceWeek <- round(store$Promo2SinceWeek, digits = 0)
store$Promo2SinceYear <- round(store$Promo2SinceYear, digits = 0)
store <- store %>%
mutate(CompetitionOpenSinceMonth = replace(CompetitionOpenSinceMonth, CompetitionOpenSinceMonth<1, 1),
CompetitionOpenSinceMonth = replace(CompetitionOpenSinceMonth, CompetitionOpenSinceMonth>12, 12),
CompetitionOpenSinceYear = replace(CompetitionOpenSinceYear, CompetitionOpenSinceYear>2015, 2015),
Promo2SinceWeek = replace(Promo2SinceWeek, Promo2SinceWeek<1, 1),
Promo2SinceWeek = replace(Promo2SinceWeek, Promo2SinceWeek>50, 50),
Promo2SinceYear = replace(Promo2SinceYear, Promo2SinceYear<2009, 2009),
Promo2SinceYear = replace(Promo2SinceYear, Promo2SinceYear>2015, 2015)
)
# Last check for NAs
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>%
row_spec(c(4,5,6,8,9), bold = T, color = "red")
# 1. Finding all combinations of stores and dates
allStoresAndDates <- expand.grid(unique(train$Store), unique(train$Date))
# 2. Naming the two columns in the newly created dataframe for step 3
names(allStoresAndDates) <- c("Store", "Date")
# 3. Extract stores with missing dates and consequently sales data.
missingDatesForStores <-  anti_join(allStoresAndDates, train, by = c("Store", "Date"))
# a. Create new date variables
store <- store %>%
mutate(CompetitionOpenSince = as.yearmon(paste(store$CompetitionOpenSinceYear, store$CompetitionOpenSinceMonth, sep = "-")),
Promo2Since = as.POSIXct(paste(store$Promo2SinceYear,store$Promo2SinceWeek, 1, sep = "-"),format = "%Y-%U-%u"))
# b. Remove redundant date variables
store <- store %>% dplyr::select(-c(Promo2SinceWeek, Promo2SinceYear, CompetitionOpenSinceMonth, CompetitionOpenSinceYear))
train.store <- merge(train, store, by = "Store")
test.store <- merge(test, store, by = "Store")
# First plot
train.store %>% group_by(DayOfWeek, Open) %>% tally() %>%
ggplot(aes(x =DayOfWeek, y=n, fill = Open)) +
geom_bar(stat="identity")
# PromotionInterval
ggplot(train.store, aes(x = factor(PromoInterval), y = Sales, color = PromoInterval)) +
geom_col() +
ggtitle("Sales by PromoInterval")
ggplot(train.store, aes(x = Date, y = Sales, color = StoreType))+
geom_smooth(se= F, size = 1.5) +
ggtitle("Sales by StoreType")
ggplot(train.store, aes(x = Date, y = Customers, color = StoreType)) +
geom_smooth(se= F, size = 1.5) +
ggtitle("Customers by StoreType")
# Assortment
ggplot(train.store, aes(x = Date, y = Sales, color = Assortment)) +
geom_smooth(se= F, size = 1.5) +
ggtitle("Sales by Assortment")
ggplot(train.store, aes(x = Date, y = Customers, color = Assortment)) +
geom_smooth(se= F, size = 1.5) +
ggtitle("Customers by Assortment")
qplot(Sales, data = train.store, bins = 50, main = "Right skewed distribution")
qplot(Sales - lag(Sales), data = train.store, bins = 50, main = "Almost normal distribution")
#Seasonality of Sales distribution
train %>%
group_by(Week, Store) %>%
mutate(sales = mean(Sales)) %>%
dplyr::slice(1) %>%
ungroup() %>%
ggplot(aes(y=Sales, x=Week, color=factor(Store))) +
geom_line() + xlab("Week") + ylab("Weekly Sales") +
theme(legend.position = "none")
plot <- train.store %>%
ggplot(aes(y=Sales, x=Sales-lag(Sales), color=factor(Week))) +
labs(title="[Fiscal] Relationship Between Last Quarter Revenue and Revenue", x="Last Quarter Revenue", y="Revenue") +
geom_point()+
geom_smooth(method=lm, se=FALSE, fullrange=TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,     ggplot2,       lubridate,             plotly,
kableExtra,    zoo,                   Scale,
forecast,      rpart,         caret,                 e1071,
mice,          stringr,       xgboost)
set.seed(113)
