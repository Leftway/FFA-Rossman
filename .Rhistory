kable_styling(bootstrap_options = c("striped","hover", position = "left"), full_width=full) %>%
column_spec(1,bold=T)
}
}
# a. Train
data.frame(colSums(is.na(train))) %>% html_df
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open)) %>% html_df()
kable(train)
kable(test) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
kable(store) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,
ggplot2,
lubridate,
plotly,
kableExtra,
Knitr)
# Create html_df for later stlying
html_df <- function(text, cols=NULL, col1=FALSE, full=F) {
if(!length(cols)) {
cols=colnames(text)
}
if(!col1) {
kable(text,"html", col.names = cols, align = c("l",rep('c',length(cols)-1))) %>%
kable_styling(bootstrap_options = c("striped","hover", position = "left"), full_width=full)
} else {
kable(text,"html", col.names = cols, align = c("l",rep('c',length(cols)-1))) %>%
kable_styling(bootstrap_options = c("striped","hover", position = "left"), full_width=full) %>%
column_spec(1,bold=T)
}
}
kable(store) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
html_df <- function(x){
kable(x) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
}
# a. Train
colSums(is.na(train) %>% data.frame()
data.frame()) %>% html_df
data.frame()) %>% html_df
()
# a. Train
colSums(is.na(train) %>% as.data.frame()
data.frame()) %>% html_df
# a. Train
colSums(is.na(train) %>% as.data.frame
data.frame()) %>% html_df
# a. Train
train %>% colSums(is.na(train))
# a. Train
data.frame(colSums(is.na(train))
data.frame()) %>% html_df
# a. Train
data.frame(colSums(is.na(train)
# a. Train
data.frame(colSums(is.na(train)
# a. Train
data.frame(colSums(is.na(train)))
# a. Train
train %>% is.na()
# a. Train
train %>% is.na() %>% colSums()
# a. Train
train %>% is.na() %>% colSums() %>% data.table()
# a. Train
train %>% is.na() %>% colSums() %>% data.frame()
# a. Train
train %>% is.na() %>% colSums() %>% data.frame(test)
# a. Train
train %>% is.na() %>% colSums() %>% data.frame()
# a. Train
train %>% is.na() %>% colSums() %>% data.frame() %>% rename("NA_Count" = .)
# a. Train
train %>% is.na() %>% colSums() %>% data.frame()
# a. Train
a <- train %>% is.na() %>% colSums() %>% data.frame()
str(a)
args(data.frame)
# a. Train
a <- train %>% is.na() %>% colSums() %>% data.frame() %>% colnames("NA_Count")
data.frame(colSums(is.na(train)))
# a. Train
a <- train %>% is.na() %>% colSums() %>% data.frame() %>% colnames("NA_Count")
# a. Train
a <- train %>% is.na() %>% colSums() %>% data.frame() %>% colnames("test")
# a. Train
a <- train %>% is.na() %>% colSums() %>% data.frame()
# a. Train
a <- train %>% is.na() %>% colSums() %>% data.frame()
a
# a. Train
a <- train %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("NACount")
a
# a. Train
train %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs")
# a. Train
train %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
%>% row_spec(5, bold = T, color = "red")
# b. Test
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# b. Test
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
?str()
dim(train)
dim(test)
dim(store)
(test)
dim(test)
dim(store)
datastructure <- data.frame(
train(c("1017209", "9"),
test(c("41088", "8"),
store(c("1115", "10")))))
datastructure <- data.frame(mutate(
train(c("1017209", "9"),
test(c("41088", "8"),
store(c("1115", "10"))))))
datastructure <- data.frame(c("1017209", "9", "41088", "8", "1115", "10"))
datastructure
datastructure <- as.data.frame(matrix(c("1017209", "9", "41088", "8", "1115", "10"),ncol=2))
datastructure
datastructure <- as.data.frame(matrix(c("1017209", "9", "41088", "8", "1115", "10"),ncol=2, byrow = TRUE))
datastructure
matrix(c("1017209", "9", "41088", "8", "1115", "10"),ncol=2, byrow= TRUE) %>% as.data.frame() %>% `row.names<-`(c("Train", "Test", "Store"))
matrix(c("1017209", "9", "41088", "8", "1115", "10"),ncol=2, byrow= TRUE) %>% as.data.frame() %>% `row.names<-`(c("Train", "Test", "Store")) %>% `colnames<-`(c("No. of Rows", "No. of Columns"))
matrix(c("1017209", "9", "41088", "8", "1115", "10"),ncol=2, byrow= TRUE) %>% as.data.frame() %>% `row.names<-`(c("Train", "Test", "Store")) %>% `colnames<-`(c("No. of Rows", "No. of Columns")) %>% html_df
matrix(c("1017209", "9", "41088", "8", "1115", "10"),ncol=2, byrow= TRUE) %>% as.data.frame() %>% `row.names<-`(c("Train", "Test", "Store")) %>% `colnames<-`(c("No. of Rows", "No. of Columns")) %>% html_df
matrix(c("1017209", "9", "41088", "8", "1115", "10"),ncol=2, byrow= TRUE) %>% as.data.frame() %>% `row.names<-`(c("Train", "Test", "Store")) %>% `colnames<-`(c("No. of Rows", "No. of Columns")) %>% html_df
dim(train)
dim(test)
dim(store)
# Train
train %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# Test
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# Store
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,
ggplot2,
lubridate,
plotly,
kableExtra,
Knitr)
# Create html_df for later stlying
html_df <- function(x){
kable(x) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
}
# Import train.csv, test.csv and store.csv
train <- read.csv("train.csv", stringsAsFactors = F)
test <- read.csv("test.csv", stringsAsFactors = F)
store <- read.csv("store.csv", stringsAsFactors = F)
str(train)
str(test)
str(store)
dim(train)
dim(test)
dim(store)
# Rows and columns of each file
matrix(c("1017209", "9", "41088", "8", "1115", "10"),ncol=2, byrow= TRUE)                                             %>% as.data.frame() %>% `row.names<-`(c("Train", "Test", "Store"))                                                %>% `colnames<-`(c("No. of Rows", "No. of Columns")) %>% html_df
# Train
train %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# Test
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# Store
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open)) %>% html_df()
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# c. Check if NA has been replaced:
sum(is.na(test$Open))
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,
ggplot2,
lubridate,
plotly,
kableExtra,
Knitr)
# Create html_df for later stlying
html_df <- function(x){
kable(x) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
}
# Import train.csv, test.csv and store.csv
train <- read.csv("train.csv", stringsAsFactors = F)
test <- read.csv("test.csv", stringsAsFactors = F)
store <- read.csv("store.csv", stringsAsFactors = F)
str(train)
str(test)
str(store)
dim(train)
dim(test)
dim(store)
# Rows and columns of each file
matrix(c("1017209", "9", "41088", "8", "1115", "10"),ncol=2, byrow= TRUE)                                             %>% as.data.frame() %>% `row.names<-`(c("Train", "Test", "Store"))                                                %>% `colnames<-`(c("No. of Rows", "No. of Columns")) %>% html_df
# Train
train %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# Test
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# Rows and columns of each file
matrix(c("1017209", "9", "41088", "8", "1115", "10"),ncol=2, byrow= TRUE)
%>% as.data.frame() %>% `row.names<-`(c("Train", "Test", "Store")) %>% `colnames<-`(c("No. of Rows", "No. of Columns")) %>% html_df
# Rows and columns of each file
matrix(c("1017209", "9", "41088", "8", "1115", "10"),ncol=2, byrow= TRUE)%>% as.data.frame() %>% `row.names<-`(c("Train", "Test", "Store")) %>% `colnames<-`(c("No. of Rows", "No. of Columns")) %>% html_df
# Rows and columns of each file
matrix(c("1017209", "9", "41088", "8", "1115", "10"),ncol=2, byrow= TRUE)%>% as.data.frame() %>% `row.names<-`(c("Train", "Test", "Store")) %>% `colnames<-`(c("No. of Rows", "No. of Columns")) %>% html_df
# Train
train %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# Test
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open)) %>% html_df()
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# c. Check if NA has been replaced:
sum(is.na(test$Open))
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday))
Day                       = as.integer(format(train$Date, "%d")) # New variable 1
Month                     = as.integer(format(train$Date, "%m")) # New variable 2
Year                      = as.integer(format(train$Date, "%Y")) # New variable 3
str(train)
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday))
Day                       = as.integer(format(test$Date, "%d"))
Month                     = as.integer(format(test$Date, "%m"))
Year                      = as.integer(format(test$Date, "%Y"))
str(test)
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2))
str(store)
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday)),
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday),
Day                       = as.integer(format(train$Date, "%d")), # New variable 1
Month                     = as.integer(format(train$Date, "%m")), # New variable 2
Year                      = as.integer(format(train$Date, "%Y"))) # New variable 3
str(train)
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday))
Day                       = as.integer(format(test$Date, "%d"))  # New variable 1
Month                     = as.integer(format(test$Date, "%m"))  # New variable 2
Year                      = as.integer(format(test$Date, "%Y"))  # New variable 3
str(test)
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2))
str(store)
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday),
Day                       = as.integer(format(train$Date, "%d")), # New variable 1
Month                     = as.integer(format(train$Date, "%m")), # New variable 2
Year                      = as.integer(format(train$Date, "%Y"))) # New variable 3
str(train)
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday),
Day                       = as.integer(format(test$Date, "%d")),  # New variable 1
Month                     = as.integer(format(test$Date, "%m")),  # New variable 2
Year                      = as.integer(format(test$Date, "%Y")))  # New variable 3
str(test)
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2))
str(store)
str(test)
str(store)
str(store)
View(train)
View(test)
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,
ggplot2,
lubridate,
plotly,
kableExtra,
Knitr)
# Create html_df for later stlying
html_df <- function(x){
kable(x) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")
}
# Import train.csv, test.csv and store.csv
train <- read.csv("train.csv", stringsAsFactors = F)
test <- read.csv("test.csv", stringsAsFactors = F)
store <- read.csv("store.csv", stringsAsFactors = F)
str(train)
str(test)
str(store)
dim(train)
dim(test)
dim(store)
# Rows and columns of each file
matrix(c("1017209", "9", "41088", "8", "1115", "10"),ncol=2, byrow= TRUE)%>% as.data.frame() %>% `row.names<-`(c("Train", "Test", "Store")) %>% `colnames<-`(c("No. of Rows", "No. of Columns")) %>% html_df
# Train
train %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# Test
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# Store
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open)) %>% html_df()
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# c. Check if NA has been replaced:
sum(is.na(test$Open))
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday),
Day                       = as.integer(format(train$Date, "%d")), # New variable 1
Month                     = as.integer(format(train$Date, "%m")), # New variable 2
Year                      = as.integer(format(train$Date, "%Y"))) # New variable 3
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday))
Day                       = as.integer(format(train$Date, "%d")), # New variable 1
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday),
Day                       = as.integer(format(train$Date, "%d")), # New variable 1
Month                     = as.integer(format(train$Date, "%m")), # New variable 2
Year                      = as.integer(format(train$Date, "%Y"))) # New variable 3
str(train)
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday),
Day                       = as.integer(format(test$Date, "%d")),  # New variable 1
Month                     = as.integer(format(test$Date, "%m")),  # New variable 2
Year                      = as.integer(format(test$Date, "%Y")))  # New variable 3
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday),
Day                       = as.integer(format(train$Date, "%d")), # New variable 1
Month                     = as.integer(format(train$Date, "%m")), # New variable 2
Year                      = as.integer(format(train$Date, "%Y"))) # New variable 3
str(train)
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday))
Day                       = as.integer(format(test$Date, "%d")),  # New variable 1
DayOfWeek                 = as.factor(DayOfWeek),
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday)),
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday),
Day                       = as.integer(format(test$Date, "%d")),  # New variable 1
Month                     = as.integer(format(test$Date, "%m")),  # New variable 2
Year                      = as.integer(format(test$Date, "%Y")))  # New variable 3
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday),
Day                       = as.integer(format(train$Date, "%d")), # New variable 1
Month                     = as.integer(format(train$Date, "%m")), # New variable 2
Year                      = as.integer(format(train$Date, "%Y"))) # New variable 3
str(train)
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday),
Day                       = as.integer(format(test$Date, "%d")),  # New variable 1
Month                     = as.integer(format(test$Date, "%m")),  # New variable 2
Year                      = as.integer(format(test$Date, "%Y")))  # New variable 3
str(test)
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2))
str(store)
#group revenues by quarter
train <- train %>%
mutate(quarters = paste0(substr(Date,1,4),quarters(as.Date(Date))))
train <- train %>%
group_by(quarters) %>%
mutate(revtq = sum(Sales,na.rm = TRUE)) %>%
ungroup()
ggplot(data = training, aes (x= sales, y= DayOfWeek)) +
geom_bar(stat = "identity")
ggplot(data = train, aes (x= sales, y= DayOfWeek)) +
geom_bar(stat = "identity")
ggplot(data = train, aes (x= sale, y= DayOfWeek)) +
geom_bar(stat = "identity")
ggplot(data = train, aes (x= Sales, y= DayOfWeek)) +
geom_bar(stat = "identity")
ggplot(data = train, aes (x= DayOfWeek, y= Sales)) +
geom_bar(stat = "identity")
table(train$DayOfweek)
unique(train$DayOfweek)
unique(train$DayOfWeek)
count <- train %>% group_by DayOfWeek %>% summarize( count = DayOfWeek)
count <- train %>% group_by DayOfWeek %>% summarise( count = DayOfWeek)
ggplot(data = train, aes (x= DayOfWeek, y= Sales)) +
geom_bar(stat = "identity")
count <- train %>% group_by (DayOfWeek) %>% summarise( count = DayOfWeek)
count <- train %>% group_by (DayOfWeek) %>% summarise( count = DayOfWeek)
count <- train %>%  summarise( count = DayOfWeek)
count <- train %>%   count = DayOfWeek)
count <- train %>%   count = DayOfWeek
unique(train$DayOfWeek)
count <- train %>%   count = DayOfWeek
count <- train %>%   count(DayOfWeek, sort = T)
count
