colSums(is.na(store))
# b. Test
colSums(is.na(test))
## 3. Convert data types
``` {r Converting data, eval = TRUE}
# b. Test
colSums(is.na(test))
str(train)
#a. Train
train %>% mutate(
Date = dmy(as.Date(Date))
)
Date = dmy(as.Date(Date, "%d/%m/%Y))
#a. Train
train %>% mutate(
Date = dmy(as.Date(Date, "%d/%m/%Y"))
#a. Train
train %>% mutate(
Date = dmy(as.Date(Date, format = "%d/%m/%Y"))
)
#a. Train
train %>% mutate(
Date = as.Date(Date, format = "%d/%m/%Y")
)
#a. Train
train %>% mutate(
Date = as.Date(Date)
)
#a. Train
train %>% mutate(
Date = dmy(as.Date(Date))
)
#a. Train
train %>% mutate(
Date = dmy(as.Date(Date, format = "%d/%m/%Y"))
)
#a. Train
train %>% mutate(
Date = as.Date(Date, format = "%d/%m/%Y")
)
#a. Train
train %>% mutate(
Date = as.Date(Date, format = "%d/%m/%y")
)
#a. Train
train %>% mutate(
Date = as.Date(Date, format = "%Y/%m/%d")
)
#a. Train
train %>% mutate(
Date = as.Date(Date, format = "%Y/%d/%m")
)
#a. Train
train %>% mutate(
Date = as.Date(Date)
)
str(train)
str(train)
#a. Train
train %>% mutate(
Date = as.Date(Date, format = "%d-%m-%Y")
)
#a. Train
train %>% mutate(
Date = as.Date(Date)
)
AsDate <- as.Date(train$Date)
str(AsDate)
str(Train)
str(train)
#a. Train
train %>% mutate(
Date = as.Date(Date)
)
str(train)
AsDate <- as.date(train$Date)
AsDate <- as.Date(train$Date)
AsDate <- dmy(as.Date(train$Date))
AsDate <- as.Date(train$Date), format = "%d/%m/%Y")
AsDate <- as.Date(train$Date)
dmy(AsDate)
#a. Train
train %>% mutate( Date = as.Date(Date)
#a. Train
train <- train %>% mutate( Date = as.Date(Date)
#a. Train
train <- train %>% mutate( Date = as.Date(Date)
#a. Train
train <- train %>% mutate(
#a. Train
train %>% mutate(
Date = as.Date(Date))
str(train)
str(train$Date)
#a. Train
train %>% mutate(
Date = as.Date(Date))
#a. Train
train <- train %>% mutate(
Date = as.Date(Date))
str(train$Date)
#a. Test
test[is.na(test$Open),]
#a. Test
test[is.na(test$Open),1:5]
test[is.na(test$Open), 5] <- 1
#a. Test
test[is.na(test$Open), 1:5]
#a. Test
test[is.na(test$Open), 1:5]
# b. Test
colSums(is.na(test))
test %>% filter(is.na(Open))
# b. Import test.csv
test <- read.csv("test.csv", stringsAsFactors = F)
# b. Test
colSums(is.na(test))
test %>% filter(is.na(Open))
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open)) %>% select(1:5))
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open)) %>% select(c("1:5"))
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open))
# b. Replace NA with Open = 1
test %>% filter(is.na(Open)) %>% select(open)
# b. Replace NA with Open = 1
test %>% filter(is.na(Open)) %>% select(Open)
# b. Replace NA with Open = 1
test %>% filter(is.na(Open)) %>% select(Open) <- 1
# b. Replace NA with Open = 1
test %>% filter(is.na(Open)) %>% select(Open) == 1
# b. Test
colSums(is.na(test))
?replace()
# b. Replace NA with Open = 1
test <- test %>% replace(Open, is.na(),1)
# b. Replace NA with Open = 1
test <- test %>% replace( is.na(Open),1)
# b. Replace NA with Open = 1
test <- test %>% replace(Open, is.na(),1)
# b. Replace NA with Open = 1
test <- test %>% replace(Open, is.na(),1)
# b. Replace NA with Open = 1
test <- test %>% replace(Open, is.na(),"1")
# b. Replace NA with Open = 1
test <- test %>% replace(Open, is.na(),"1")
# b. Replace NA with Open = 1
test <- test %>% mutate( Open = replace(Open, is.na(),"1"))
# b. Replace NA with Open = 1
test <- test %>% mutate( Open = replace(Open, is.na(Open),"1"))
# b. Replace NA with Open = 1
test <- test %>% mutate( Open = replace(Open, is.na(Open),"1"))
# b. Test
colSums(is.na(test))
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# b. Import test.csv
test <- read.csv("test.csv", stringsAsFactors = F)
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# b. Test
colSums(is.na(test))
test <- test %>%  replace(Open, is.na(Open),1))
test <- test %>%  replace(Open, is.na(Open),1)
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
test <- test %>%  replace(Open, is.na(Open),1)
test[is.na(test$Open), 5] <- 1
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open))
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
colSums(is.na(test))
# c. Check if NA has been replaced:
colSums(is.na(test$Open))
# a. Import train.csv
train <- read.csv("train.csv", stringsAsFactors = F)
# b. Import test.csv
test <- read.csv("test.csv", stringsAsFactors = F)
# c.  Import store.csv
store <- read.csv("store.csv", stringsAsFactors = F)
# a. Train
colSums(is.na(train))
# b. Test
colSums(is.na(test))
# c. Store
colSums(is.na(store))
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open))
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# c. Check if NA has been replaced:
colSums(is.na(test$Open))
# c. Check if NA has been replaced:
is.na(test$Open)
# c. Check if NA has been replaced:
sum(is.na(test$Open))
# c.  Import store.csv
# c.  Import store.csv
store <- read.csv("store.csv", stringsAsFactors = F)
# b. Import test.csv
test <- read.csv("test.csv", stringsAsFactors = F)
# b. Test
colSums(is.na(test))
# c. Check if NA has been replaced:
sum(is.na(test$Open))
# a. Import train.csv
train <- read.csv("train.csv", stringsAsFactors = F)
# b. Import test.csv
test <- read.csv("test.csv", stringsAsFactors = F)
# c.  Import store.csv
store <- read.csv("store.csv", stringsAsFactors = F)
# a. Train
colSums(is.na(train))
# b. Test
colSums(is.na(test))
# c. Store
colSums(is.na(store))
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open))
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# c. Check if NA has been replaced:
sum(is.na(test$Open))
install.packages("pacman")
# Load relevant libraries
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, readr, lubridate, pryr)
colSums(is.null(train))
Date = as.Date(Date),
Date = as.Date(Date),
str(train)
#b.
# test <- read_csv("test.csv", col_types = cols(
Id                        = col_integer(),
str(test)
#a. Train
train <- train %>% mutate(
Date = as.Date(Date),
Open                      = factor("0", "1"))
# Promo                     = col_factor(c("0", "1"),
# StateHoliday              = col_factor(c("0", "a", "b", "c"),
# SchoolHoliday             = col_factor(c("0", "1"))
str(train)
#a. Train
train <- train %>% mutate(
Date = as.Date(Date),
Open                      = factor(c"0", "1")))
#a. Train
train <- train %>% mutate(
Date = as.Date(Date),
Open                      = factor(c("0", "1")))
#a. Train
train <- train %>% mutate(
Date = as.Date(Date),
Open                      = factor(c("0", "1")))
#a. Train
train <- train %>% mutate(
Date = as.Date(Date),
Open                      = as.factor(c("0", "1")))
# a. Train
colSums(is.na(train))
# b. Test
colSums(is.na(test))
# c. Store
colSums(is.na(store))
# a. Import train.csv
train <- read.csv("train.csv", stringsAsFactors = F)
# b. Import test.csv
test <- read.csv("test.csv", stringsAsFactors = F)
# c.  Import store.csv
store <- read.csv("store.csv", stringsAsFactors = F)
# a. Train
colSums(is.na(train))
# b. Test
colSums(is.na(test))
# c. Store
colSums(is.na(store))
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open))
# Install & load relevant libraries
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, readr, lubridate, pryr)
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open))
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# c. Check if NA has been replaced:
sum(is.na(test$Open))
Date = as.Date(Date),
#a. Train
train <- train %>% mutate(
Date = as.Date(Date),
Open                      = as.factor())
#a. Train
train <- train %>% mutate(
Date = as.Date(Date),
Open                      = as.factor(Open))
# Promo                     = col_factor(c("0", "1"),
# StateHoliday              = col_factor(c("0", "a", "b", "c"),
# SchoolHoliday             = col_factor(c("0", "1"))
str(train)
Promo                     = as.factor(Promo),
#a. Train
train <- train %>% mutate(
Date = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),
SchoolHoliday             = as.factor(SchoolHoliday))
str(train)
#b.
test <- test %>% mutate(
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),
SchoolHoliday             = as.factor(SchoolHoliday))
str(test)
levels(test$Promo)
#b.
test <- test %>% mutate(
Date                      = as.Date(Date),
Open                      = as.factor(Open, ordered = TRUE),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),
SchoolHoliday             = as.factor(SchoolHoliday))
#a. Train
train <- train %>% mutate(
Date                      = as.Date(Date),
Open                      = factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),
SchoolHoliday             = as.factor(SchoolHoliday))
#a. Train
train <- train %>% mutate(
Date                      = as.Date(Date),
Open                      = factor(Open),
Promo                     = factor(Promo),
StateHoliday              = factor(StateHoliday),
SchoolHoliday             = factor(SchoolHoliday))
# a. Import train.csv
train <- read.csv("train.csv", stringsAsFactors = F)
# b. Import test.csv
test <- read.csv("test.csv", stringsAsFactors = F)
# c.  Import store.csv
store <- read.csv("store.csv", stringsAsFactors = F)
# a. Train
colSums(is.na(train))
# b. Test
colSums(is.na(test))
# c. Store
colSums(is.na(store))
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open))
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# c. Check if NA has been replaced:
sum(is.na(test$Open))
#a. Train
train <- train %>% mutate(
Date                      = as.Date(Date),
Open                      = factor(Open),
Promo                     = factor(Promo),
StateHoliday              = factor(StateHoliday),
SchoolHoliday             = factor(SchoolHoliday))
str(test)
#b.
test <- test %>% mutate(
Date                      = as.Date(Date),
Open                      = factor(Open, ordered = TRUE),
Promo                     = factor(Promo),
StateHoliday              = factor(StateHoliday),
SchoolHoliday             = factor(SchoolHoliday))
levels(test$Promo)
levels(test$Open)
#c. Store
str(store)
View(store)
#c. Store
store <- store %>% mutate(
StoreType                = as.factor(StoreType),
Assortment               = as.factor(Assortment),
Promo2                   = as.factor(Promo2))
str(store)
View(store)
View(store)
head(store)
View(store)
View(test)
View(train)
View(train)
View(test)
---
title: "Rossman Store Sales "
subtitle: "Group 1 - Exploratory Data Analysis"
author: '1. Kang Jun Han Brandon, 2.Kenny Sim Jun Hong, 3. Lim Yong Chuan,  4. Tan Soon Wei,  5. Teo Xiangquan Martin'
date: "`r Sys.Date()`"
output:
tufte::tufte_html:
tufte_variant: "default"
self_contained: yes
---
```{r libraries, include = FALSE}
# Install & load relevant libraries
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, readr, lubridate, pryr)
```
# Data Cleaning
## 1. Importing files
Import files from train, store, and test.
``` {r read, eval = TRUE}
# a. Import train.csv
train <- read.csv("train.csv", stringsAsFactors = F)
# b. Import test.csv
test <- read.csv("test.csv", stringsAsFactors = F)
# c.  Import store.csv
store <- read.csv("store.csv", stringsAsFactors = F)
```
## 2. Check for NA values
```{r NA values, eval = TRUE}
# a. Train
colSums(is.na(train))
# b. Test
colSums(is.na(test))
# c. Store
colSums(is.na(store))
```
## 3. Imputing missing values for test
``` {r Impute, eval = TRUE}
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open))
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# c. Check if NA has been replaced:
sum(is.na(test$Open))
```
__Explanation__:
+ If we assume
## 3. Convert data types
``` {r Converting data, eval = TRUE}
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday))
str(train)
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday))
str(test)
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2))
str(store)
```
library(ggplot2)
library(tidyverse)
library(plotly)
library(lubridate)
train <- train %>%
mutate(quarters = quarters(as.Date(Date)))
train <- train %>%
mutate(quarters = substr(Date, last = 4) + quarters(as.Date(Date)))
#group revenues by quarter
train <- train %>%
mutate(quarters = substr(Date,4) + quarters(as.Date(Date)))
#group revenues by quarter
train <- train %>%
mutate(quarters = substr(Date,4) + quarters(as.Date(Date)))
substr(Date,4)
substr(train$Date,4)
substr(train$Date,1,4)
train <- train %>%
mutate(quarters = substr(Date,1,4) + quarters(as.Date(Date)))
train <- train %>%
mutate(quarters = paste(substr(Date,1,4),quarters(as.Date(Date))))
train <- train %>%
mutate(quarters = paste(substr(Date,1,4),quarters(as.Date(Date))))
#group revenues by quarter
train <- train %>%
mutate(quarters = paste0(substr(Date,1,4),quarters(as.Date(Date))))
train <- train %>%
group_by(quarters) %>%
mutate(revtq = rowSums(Sales)) %>%
ungroup()
train <- train %>%
group_by(quarters) %>%
mutate(revtq = colSums(Sales)) %>%
ungroup()
train <- train %>%
group_by(quarters) %>%
mutate(revtq = rowSums(Sales,factor(quarters))) %>%
ungroup()
train <- train %>%
group_by(quarters) %>%
mutate(revtq = rowSums(Sales,na.rm = TRUE) %>%
ungroup()
View(train)
View(train)
View(train)
