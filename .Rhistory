# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
colSums(is.na(test))
# c. Check if NA has been replaced:
colSums(is.na(test$Open))
# a. Import train.csv
train <- read.csv("train.csv", stringsAsFactors = F)
# b. Import test.csv
test <- read.csv("test.csv", stringsAsFactors = F)
# c.  Import store.csv
store <- read.csv("store.csv", stringsAsFactors = F)
# a. Train
colSums(is.na(train))
# b. Test
colSums(is.na(test))
# c. Store
colSums(is.na(store))
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open))
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# c. Check if NA has been replaced:
colSums(is.na(test$Open))
# c. Check if NA has been replaced:
is.na(test$Open)
# c. Check if NA has been replaced:
sum(is.na(test$Open))
# c.  Import store.csv
# c.  Import store.csv
store <- read.csv("store.csv", stringsAsFactors = F)
# b. Import test.csv
test <- read.csv("test.csv", stringsAsFactors = F)
# b. Test
colSums(is.na(test))
# c. Check if NA has been replaced:
sum(is.na(test$Open))
# a. Import train.csv
train <- read.csv("train.csv", stringsAsFactors = F)
# b. Import test.csv
test <- read.csv("test.csv", stringsAsFactors = F)
# c.  Import store.csv
store <- read.csv("store.csv", stringsAsFactors = F)
# a. Train
colSums(is.na(train))
# b. Test
colSums(is.na(test))
# c. Store
colSums(is.na(store))
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open))
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# c. Check if NA has been replaced:
sum(is.na(test$Open))
install.packages("pacman")
# Load relevant libraries
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, readr, lubridate, pryr)
colSums(is.null(train))
Date = as.Date(Date),
Date = as.Date(Date),
str(train)
#b.
# test <- read_csv("test.csv", col_types = cols(
Id                        = col_integer(),
str(test)
#a. Train
train <- train %>% mutate(
Date = as.Date(Date),
Open                      = factor("0", "1"))
# Promo                     = col_factor(c("0", "1"),
# StateHoliday              = col_factor(c("0", "a", "b", "c"),
# SchoolHoliday             = col_factor(c("0", "1"))
str(train)
#a. Train
train <- train %>% mutate(
Date = as.Date(Date),
Open                      = factor(c"0", "1")))
#a. Train
train <- train %>% mutate(
Date = as.Date(Date),
Open                      = factor(c("0", "1")))
#a. Train
train <- train %>% mutate(
Date = as.Date(Date),
Open                      = factor(c("0", "1")))
#a. Train
train <- train %>% mutate(
Date = as.Date(Date),
Open                      = as.factor(c("0", "1")))
# a. Train
colSums(is.na(train))
# b. Test
colSums(is.na(test))
# c. Store
colSums(is.na(store))
# a. Import train.csv
train <- read.csv("train.csv", stringsAsFactors = F)
# b. Import test.csv
test <- read.csv("test.csv", stringsAsFactors = F)
# c.  Import store.csv
store <- read.csv("store.csv", stringsAsFactors = F)
# a. Train
colSums(is.na(train))
# b. Test
colSums(is.na(test))
# c. Store
colSums(is.na(store))
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open))
# Install & load relevant libraries
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, readr, lubridate, pryr)
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open))
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# c. Check if NA has been replaced:
sum(is.na(test$Open))
Date = as.Date(Date),
#a. Train
train <- train %>% mutate(
Date = as.Date(Date),
Open                      = as.factor())
#a. Train
train <- train %>% mutate(
Date = as.Date(Date),
Open                      = as.factor(Open))
# Promo                     = col_factor(c("0", "1"),
# StateHoliday              = col_factor(c("0", "a", "b", "c"),
# SchoolHoliday             = col_factor(c("0", "1"))
str(train)
Promo                     = as.factor(Promo),
#a. Train
train <- train %>% mutate(
Date = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),
SchoolHoliday             = as.factor(SchoolHoliday))
str(train)
#b.
test <- test %>% mutate(
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),
SchoolHoliday             = as.factor(SchoolHoliday))
str(test)
levels(test$Promo)
#b.
test <- test %>% mutate(
Date                      = as.Date(Date),
Open                      = as.factor(Open, ordered = TRUE),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),
SchoolHoliday             = as.factor(SchoolHoliday))
#a. Train
train <- train %>% mutate(
Date                      = as.Date(Date),
Open                      = factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),
SchoolHoliday             = as.factor(SchoolHoliday))
#a. Train
train <- train %>% mutate(
Date                      = as.Date(Date),
Open                      = factor(Open),
Promo                     = factor(Promo),
StateHoliday              = factor(StateHoliday),
SchoolHoliday             = factor(SchoolHoliday))
# a. Import train.csv
train <- read.csv("train.csv", stringsAsFactors = F)
# b. Import test.csv
test <- read.csv("test.csv", stringsAsFactors = F)
# c.  Import store.csv
store <- read.csv("store.csv", stringsAsFactors = F)
# a. Train
colSums(is.na(train))
# b. Test
colSums(is.na(test))
# c. Store
colSums(is.na(store))
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open))
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# c. Check if NA has been replaced:
sum(is.na(test$Open))
#a. Train
train <- train %>% mutate(
Date                      = as.Date(Date),
Open                      = factor(Open),
Promo                     = factor(Promo),
StateHoliday              = factor(StateHoliday),
SchoolHoliday             = factor(SchoolHoliday))
str(test)
#b.
test <- test %>% mutate(
Date                      = as.Date(Date),
Open                      = factor(Open, ordered = TRUE),
Promo                     = factor(Promo),
StateHoliday              = factor(StateHoliday),
SchoolHoliday             = factor(SchoolHoliday))
levels(test$Promo)
levels(test$Open)
#c. Store
str(store)
View(store)
#c. Store
store <- store %>% mutate(
StoreType                = as.factor(StoreType),
Assortment               = as.factor(Assortment),
Promo2                   = as.factor(Promo2))
str(store)
View(store)
View(store)
head(store)
str(train)
str(train)
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),
SchoolHoliday             = as.factor(SchoolHoliday))
pacman::p_load(dplyr, ggplot2, readr, lubridate, pryr)
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),
SchoolHoliday             = as.factor(SchoolHoliday))
= as.factor(SchoolHoliday))
str(train)
str(test)
#b. Test
test <- test %>% mutate(
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),
SchoolHoliday             = as.factor(SchoolHoliday))
str(test)
pacman::p_load(dplyr, ggplot2, readr, lubridate, pryr)
``` {r read, eval = TRUE}
# a. Import train.csv
train <- read.csv("train.csv", stringsAsFactors = F)
# b. Import test.csv
test <- read.csv("test.csv", stringsAsFactors = F)
# c.  Import store.csv
store <- read.csv("store.csv", stringsAsFactors = F)
# a. Train
colSums(is.na(train))
# b. Test
colSums(is.na(test))
# c. Store
colSums(is.na(store))
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open))
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# c. Check if NA has been replaced:
sum(is.na(test$Open))
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),
SchoolHoliday             = as.factor(SchoolHoliday))
#b. Test
test <- test %>% mutate(
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),
SchoolHoliday             = as.factor(SchoolHoliday))
str(test)
#c. Store
store <- store %>% mutate(
StoreType                = as.factor(StoreType),
Assortment               = as.factor(Assortment),
Promo2                   = as.factor(Promo2))
str(test)
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),
SchoolHoliday             = as.factor(SchoolHoliday))
str(test)
str(train)
str(test)
str(train)
str(test)
str(store)
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
CompetitionOpenSinceMonth = month(CompetitionOpenSinceMonth),
Promo2                    = as.factor(Promo2))
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
CompetitionOpenSinceMonth = month(CompetitionOpenSinceMonth),
Promo2                    = as.factor(Promo2))
str(store)
yeayear <- year(store$Promo2SinceYear)
str(store)
str(store)
# a. Import train.csv
train <- read.csv("train.csv", stringsAsFactors = F)
# b. Import test.csv
test <- read.csv("test.csv", stringsAsFactors = F)
# c.  Import store.csv
store <- read.csv("store.csv", stringsAsFactors = F)
# a. Train
colSums(is.na(train))
# b. Test
colSums(is.na(test))
# c. Store
colSums(is.na(store))
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open))
# Install & load relevant libraries
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, readr, lubridate, pryr)
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open))
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# c. Check if NA has been replaced:
sum(is.na(test$Open))
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday))
str(train)
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday))
str(test)
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2))
str(store)
min(train$Date)
max(train$Date)
max(train$Date) - min(train$Date)
man(train$Date
max(train$Date
min(train$Date)
max(train$Date)
str(train)
train$month <- as.integer(format(train$Date, "%m"))
train$year <- as.integer(format(train$Date, "%y"))
train$day <- as.integer(format(train$Date, "%d"))
train$month <- as.integer(format(train$Date, "%m"))
train$year <- as.integer(format(train$Date, "%Y"))
train$day <- as.integer(format(train$Date, "%d"))
as.integer(format(train$Date, "%m")
# Training
train$month <- format(train$Date, "%m")
# Training
train$month <- format(train$Date, "%m")
View(train)
train <- train[,-3]
test <- test[,-4]
test$day <- as.integer(format(test$Date, "%d"))
test$month <- as.integer(format(test$Date, "%m"))
test$year <- as.integer(format(test$Date, "%y"))
test <- test[,-4]
train$year <- as.integer(format(train$Date, "%Y"))
# Training
train$day <- as.integer(format(train$Date, "%d"))
train$month <- as.integer(format(train$Date, "%m"))
train$year <- as.integer(format(train$Date, "%Y"))
train <- train[,-3]
# Test
test$day <- as.integer(format(test$Date, "%d"))
test$month <- as.integer(format(test$Date, "%m"))
test$year <- as.integer(format(test$Date, "%y"))
test <- test[,-4]
# Install & load relevant libraries
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, readr, lubridate, pryr)
# a. Import train.csv
train <- read.csv("train.csv", stringsAsFactors = F)
# b. Import test.csv
test <- read.csv("test.csv", stringsAsFactors = F)
# c.  Import store.csv
store <- read.csv("store.csv", stringsAsFactors = F)
# a. Train
colSums(is.na(train))
# b. Test
colSums(is.na(test))
# c. Store
colSums(is.na(store))
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open))
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# c. Check if NA has been replaced:
sum(is.na(test$Open))
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday))
str(train)
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday))
str(test)
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2))
str(store)
# Training
train$day <- as.integer(format(train$Date, "%d"))
train$month <- as.integer(format(train$Date, "%m"))
train$year <- as.integer(format(train$Date, "%Y"))
train <- train[,-3]
# Test
test$day <- as.integer(format(test$Date, "%d"))
test$month <- as.integer(format(test$Date, "%m"))
test$year <- as.integer(format(test$Date, "%y"))
test <- test[,-4]
test$year <- as.integer(format(test$Date, "%Y"))
# a. Import train.csv
train <- read.csv("train.csv", stringsAsFactors = F)
# b. Import test.csv
test <- read.csv("test.csv", stringsAsFactors = F)
# c.  Import store.csv
store <- read.csv("store.csv", stringsAsFactors = F)
# a. Train
colSums(is.na(train))
# b. Test
colSums(is.na(test))
# c. Store
colSums(is.na(store))
# a. Retrieve records with Open = NA
test %>% filter(is.na(Open))
# b. Replace NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# c. Check if NA has been replaced:
sum(is.na(test$Open))
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday))
str(train)
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday))
str(test)
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2))
str(store)
# Training
train$day <- as.integer(format(train$Date, "%d"))
train$month <- as.integer(format(train$Date, "%m"))
train$year <- as.integer(format(train$Date, "%Y"))
train <- train[,-3]
# Test
test$day <- as.integer(format(test$Date, "%d"))
test$month <- as.integer(format(test$Date, "%m"))
test$year <- as.integer(format(test$Date, "%Y"))
test <- test[,-4]
