# P.S: yearmon functon creates a numeric vector interpreted in "years" and fractions of years. e.g. 1961.5 = June 1961.
# Histogram for CompetitionOpenedSince
plot_ly(x= store$CompetitionOpenSince, type = "histogram") %>%
layout(title = "Distribution of CompetitionOpenedSince",
xaxis = list(title = "Year",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
# First plot
ggplot(data = train, aes (x= DayOfWeek, y= Sales)) +
geom_bar(stat = "identity")
# First plot
ggplot(data = train.store, aes (x= DayOfWeek, y= Sales)) +
geom_bar(stat = "identity")
# Check if closed stores have any sales. Result = no anomalies.
train.closed <- train[train$Open == 0,]
train.closed$Sales %>% sum()
# First plot
ggplot(data = train.store, aes (x= DayOfWeek, y= Sales)) +
geom_bar(stat = "identity")
# Second plot
train.store %>% group_by(DayOfWeek, Open) %>% tally() %>%
ggplot(aes(x =DayOfWeek, y=n, fill = Open)) +
geom_bar(stat="identity")
str(train.store)
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday))
str(train)
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday))
str(test)
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
PromoInterval             = as.factor(PromoInterval),
CompetitionOpenSinceMonth = as.numeric(CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = as.numeric(CompetitionOpenSinceYear))
str(store)
train.store <- merge(train, store, by = "Store")
test.store <- merge(test, store, by = "Store")
# Check if closed stores have any sales. Result = no anomalies.
train.closed <- train[train$Open == 0,]
train.closed$Sales %>% sum()
# First plot
ggplot(data = train.store, aes (x= DayOfWeek, y= Sales)) +
geom_bar(stat = "identity")
# Second plot
train.store %>% group_by(DayOfWeek, Open) %>% tally() %>%
ggplot(aes(x =DayOfWeek, y=n, fill = Open)) +
geom_bar(stat="identity")
View(train.store)
# Import train.csv, test.csv and store.csv
train <- read.csv("train.csv", stringsAsFactors = F)
test <- read.csv("test.csv", stringsAsFactors = F)
store <- read.csv("store.csv", stringsAsFactors = F)
str(train)
str(test)
str(store)
dim(train)
dim(test)
dim(store)
# Rows and columns of each file
matrix(c("1017209", "9", "41088", "8", "1115", "10"),ncol=2, byrow= TRUE) %>%
as.data.frame() %>%
`row.names<-`(c("Train", "Test", "Store")) %>%
`colnames<-`(c("No. of Rows", "No. of Columns")) %>% html_df
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,  ggplot2,  lubridate,  plotly,   kableExtra,   zoo,   Scale,   forecast,   rpart,  caret,   e1071)
# Create html_df for later stlying
html_df <- function(x){ kable(x) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")}
# Rows and columns of each file
matrix(c("1017209", "9", "41088", "8", "1115", "10"),ncol=2, byrow= TRUE) %>%
as.data.frame() %>%
`row.names<-`(c("Train", "Test", "Store")) %>%
`colnames<-`(c("No. of Rows", "No. of Columns")) %>% html_df
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday))
str(train)
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday))
str(test)
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
PromoInterval             = as.factor(PromoInterval),
CompetitionOpenSinceMonth = as.numeric(CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = as.numeric(CompetitionOpenSinceYear))
str(store)
# Test
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# a. Impute NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# b. Check if NA has been replaced:
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# For CompetitionDistance, impute NA with mean of CompetitionDistance
store <- store %>%
mutate(CompetitionDistance= replace(CompetitionDistance, is.na(CompetitionDistance), mean(CompetitionDistance,na.rm=T)))
# For CompetitionOpenSinceMonth/Year + Promo2SinceYear/Weak: impute NA with median
store <- store %>%
mutate(CompetitionOpenSinceMonth=ifelse(is.na(CompetitionOpenSinceMonth),median(CompetitionOpenSinceMonth,na.rm=T), CompetitionOpenSinceMonth),
CompetitionOpenSinceYear=ifelse(is.na(CompetitionOpenSinceYear),median(CompetitionOpenSinceYear,na.rm=T), CompetitionOpenSinceYear),
Promo2SinceYear=ifelse(is.na(Promo2SinceYear),0, Promo2SinceYear),
Promo2SinceWeek=ifelse(is.na(Promo2SinceWeek),0, Promo2SinceWeek))
# Last check for NAs
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>%
row_spec(c(4,5,6,8,9), bold = T, color = "red")
plot(train$Date, type = "l")
plot(test$Date, type = "l")
View(store)
# Check if closed stores have any sales. Result = no anomalies.
train.closed <- train[train$Open == 0,]
train.closed$Sales %>% sum()
# First plot
train.store %>% group_by(DayOfWeek, Open) %>% tally() %>%
ggplot(aes(x =DayOfWeek, y=n, fill = Open)) +
geom_bar(stat="identity")
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
PromoInterval             = as.factor(PromoInterval),
CompetitionOpenSinceMonth = as.numeric(CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = as.numeric(CompetitionOpenSinceYear),
CompetitionOpenSince      = as.yearmon(paste(store$CompetitionOpenSinceYear,              # Combine Since Month & Year into 1 variable
store$CompetitionOpenSinceMonth, sep = "-")))
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
PromoInterval             = as.factor(PromoInterval),
CompetitionOpenSinceMonth = as.numeric(CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = as.numeric(CompetitionOpenSinceYear),
CompetitionOpenSince      = as.yearmon(paste(store$CompetitionOpenSinceYear,              # Combine Month & Year into 1 date variable
store$CompetitionOpenSinceMonth, sep = "-")),
Promo2Since               = as.POSIXct(paste(store$Promo2SinceYear,
store$Promo2SinceWeek, 1, sep = "-"),format = "%Y-%U-%u"))
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
PromoInterval             = as.factor(PromoInterval),
CompetitionOpenSinceMonth = as.numeric(CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = as.numeric(CompetitionOpenSinceYear))
str(train)
str(test)
str(store)
store <- select(store, -c(Promo2SinceWeek, Promo2SinceYear, CompetitionOpenSinceMonth, CompetitionOpenSinceYear))
store <- store %>% select( -c(Promo2SinceWeek, Promo2SinceYear, CompetitionOpenSinceMonth, CompetitionOpenSinceYear))
store <- store %>% dplyr::select( -c(Promo2SinceWeek, Promo2SinceYear, CompetitionOpenSinceMonth, CompetitionOpenSinceYear))
str(store)
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,  ggplot2,  lubridate,  plotly,   kableExtra,   zoo,   Scale,   forecast,   rpart,  caret,   e1071)
# Create html_df for later stlying
html_df <- function(x){ kable(x) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")}
# Import train.csv, test.csv and store.csv
train <- read.csv("train.csv", stringsAsFactors = F)
test <- read.csv("test.csv", stringsAsFactors = F)
store <- read.csv("store.csv", stringsAsFactors = F)
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday))
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday))
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
PromoInterval             = as.factor(PromoInterval),
CompetitionOpenSinceMonth = as.numeric(CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = as.numeric(CompetitionOpenSinceYear))
# a. Impute NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# b. Check if NA has been replaced:
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# For CompetitionDistance, impute NA with mean of CompetitionDistance
store <- store %>%
mutate(CompetitionDistance= replace(CompetitionDistance, is.na(CompetitionDistance), mean(CompetitionDistance,na.rm=T)))
# For CompetitionOpenSinceMonth/Year + Promo2SinceYear/Weak: impute NA with median
store <- store %>%
mutate(CompetitionOpenSinceMonth=ifelse(is.na(CompetitionOpenSinceMonth),median(CompetitionOpenSinceMonth,na.rm=T), CompetitionOpenSinceMonth),
CompetitionOpenSinceYear=ifelse(is.na(CompetitionOpenSinceYear),median(CompetitionOpenSinceYear,na.rm=T), CompetitionOpenSinceYear),
Promo2SinceYear=ifelse(is.na(Promo2SinceYear),0, Promo2SinceYear),
Promo2SinceWeek=ifelse(is.na(Promo2SinceWeek),0, Promo2SinceWeek))
# Last check for NAs
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>%
row_spec(c(4,5,6,8,9), bold = T, color = "red")
plot(train$Date, type = "l")
plot(test$Date, type = "l")
store <- store %>% dplyr::select( -c(Promo2SinceWeek, Promo2SinceYear, CompetitionOpenSinceMonth, CompetitionOpenSinceYear))
train.store <- merge(train, store, by = "Store")
test.store <- merge(test, store, by = "Store")
#Previous stored variables removed
object.size(store)
object_size(store)
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,  ggplot2,  lubridate,  plotly,   kableExtra,   zoo,   Scale,   forecast,   rpart,  caret,   e1071, pryr)
# Create html_df for later stlying
html_df <- function(x){ kable(x) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")}
object_size(store)
train.store <- merge(train, store, by = "Store")
test.store <- merge(test, store, by = "Store")
rm(store)
rm(test)
rm(store)
#Previous stored variables removed
object_size(store)
rm(train)
# Check if closed stores have any sales. Result = no anomalies.
train.closed <- train[train$Open == 0,]
train[train.store$Open == 0,]
# Check if closed stores have any sales. Result = no anomalies.
train.store[train.store$Open == 0,]
# Check if closed stores have any sales. Result = no anomalies.
train.store[train.store$Open == 0,] %>% object_size()
# Check if closed stores have any sales. Result = no anomalies.
train.store[train.store$Open == 0,] %>% object_size()
# Check if closed stores have any sales. Result = no anomalies.
train.store[train.store$Open == 0,] %>% object_size()
# Check if closed stores have any sales. Result = no anomalies.
train.store[train.store$Open == 0,] %>% train.closed$Sales %>% sum()
# Check if closed stores have any sales. Result = no anomalies.
train.store[train.store$Open == 0,] %>% train.store$Sales %>% sum()
# Check if closed stores have any sales. Result = no anomalies.
train.store %>% filter(Open == 0)
# Check if closed stores have any sales. Result = no anomalies.
train.store %>% filter(Open == 0) %>% train.store$Sales %>% sum()
# Check if closed stores have any sales. Result = no anomalies.
train.store %>% filter(Open == 0) %>% sum(Sales)
# Check if closed stores have any sales. Result = no anomalies.
train.store %>% filter(Open == 0) %>% sum(train.store$Sales)
# Check if closed stores have any sales. Result = no anomalies.
train.store %>% filter(Open == 0)
# Check if closed stores have any sales. Result = no anomalies.
train.store %>% filter(Open == 0) %>% table()
# Check if closed stores have any sales. Result = no anomalies.
train.store %>% filter(Open == 0) %>% colSums()
# Check if closed stores have any sales. Result = no anomalies.
train.store %>% filter(Open == 0) %>% colSums(train.store$Sales)
# Check if closed stores have any sales. Result = no anomalies.
train.store %>% filter(Open == 0) %>% colSums()
# Check if closed stores have any sales. Result = no anomalies.
train.store %>% filter(Open == 0) %>% select(Sales) %>% colSums()
View(train.store)
View(test.store)
r
store <- store %>%
dplyr::select( -c(Promo2SinceWeek, Promo2SinceYear, CompetitionOpenSinceMonth, CompetitionOpenSinceYear)
%>%  mutate(CompetitionOpenSince = as.yearmon(paste(store$CompetitionOpenSinceYear,                                                                                              store$CompetitionOpenSinceMonth, sep = "-"))),
Promo2Since = as.POSIXct(paste(store$Promo2SinceYear,
store$Promo2SinceWeek, 1, sep = "-"),format = "%Y-%U-%u"))
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,  ggplot2,  lubridate,  plotly,   kableExtra,   zoo,   Scale,   forecast,   rpart,  caret,   e1071, pryr)
# Create html_df for later stlying
html_df <- function(x){ kable(x) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")}
# Import train.csv, test.csv and store.csv
train <- read.csv("train.csv", stringsAsFactors = F)
test <- read.csv("test.csv", stringsAsFactors = F)
store <- read.csv("store.csv", stringsAsFactors = F)
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday))
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday))
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
PromoInterval             = as.factor(PromoInterval),
CompetitionOpenSinceMonth = as.numeric(CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = as.numeric(CompetitionOpenSinceYear))
# a. Impute NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# b. Check if NA has been replaced:
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# Store
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# For CompetitionDistance, impute NA with mean of CompetitionDistance
store <- store %>%
mutate(CompetitionDistance= replace(CompetitionDistance, is.na(CompetitionDistance), mean(CompetitionDistance,na.rm=T)))
# For CompetitionOpenSinceMonth/Year + Promo2SinceYear/Weak: impute NA with median
store <- store %>%
mutate(CompetitionOpenSinceMonth=ifelse(is.na(CompetitionOpenSinceMonth),median(CompetitionOpenSinceMonth,na.rm=T), CompetitionOpenSinceMonth),
CompetitionOpenSinceYear=ifelse(is.na(CompetitionOpenSinceYear),median(CompetitionOpenSinceYear,na.rm=T), CompetitionOpenSinceYear),
Promo2SinceYear=ifelse(is.na(Promo2SinceYear),0, Promo2SinceYear),
Promo2SinceWeek=ifelse(is.na(Promo2SinceWeek),0, Promo2SinceWeek))
# Last check for NAs
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>%
row_spec(c(4,5,6,8,9), bold = T, color = "red")
## Find missing data ##
# Expected rows of records (1115 x 941 days) = 1,049,215  vs Actual = 1,017,209. Missing records = 33,121
# 1. Finding all combinations of stores and dates
allStoresAndDates <- expand.grid(unique(train.store$Store), unique(train.store$Date))
# Explanation
# - List all permutations of stores (1,115) and dates (971 days)
# 2. Naming the two columns in the newly created dataframe for step 3
names(allStoresAndDates) <- c("Store", "Date")
# 3. Extract stores with missing dates and consequently sales data.
missingDatesForStores <-  anti_join(allStoresAndDates, train.store, by = c("Store", "Date"))
# Explanation
# - anti_join is a dplyr function that finds unmatched records.
# - 1st parameter = "Master table"
# - 2nd parameter = Comparison table
# - Function checks "train.store" records against "allStoresAndDates" and for
# records that train.store do not have, show it as an output.
# Actual missing records do not equate to expected missing records as some stores may only be opened after the start date.
## Note: Ignoring missing data ##
# As per competition host, Florian, "The missing data yousd?re observing for a 6 month period in 2014 was a mistake done by us. For some stores this data was simply not included in the train-set. We’ve discussed this with Kaggle and decided that it’s an insignificant omission as there are still more than enough store/date combinations left to create a model on.""
## Conclusion: Proceed to find other missing data.
store <- store %>%
dplyr::select( -c(Promo2SinceWeek, Promo2SinceYear, CompetitionOpenSinceMonth, CompetitionOpenSinceYear)
%>%  mutate(CompetitionOpenSince = as.yearmon(paste(store$CompetitionOpenSinceYear,                                                                                              store$CompetitionOpenSinceMonth, sep = "-"))),
Promo2Since = as.POSIXct(paste(store$Promo2SinceYear,
store$Promo2SinceWeek, 1, sep = "-"),format = "%Y-%U-%u"))
# Creating new date variables
store <- store %>%
mutate(CompetitionOpenSince = as.yearmon(paste(store$CompetitionOpenSinceYear, store$CompetitionOpenSinceMonth, sep = "-")),
Promo2Since = as.POSIXct(paste(store$Promo2SinceYear,store$Promo2SinceWeek, 1, sep = "-"),format = "%Y-%U-%u"))
# b. Remove redundant date variables
store <- dplyr::select(-c(Promo2SinceWeek, Promo2SinceYear, CompetitionOpenSinceMonth, CompetitionOpenSinceYear))
# a. Createnew date variables
store <- store %>%
mutate(CompetitionOpenSince = as.yearmon(paste(store$CompetitionOpenSinceYear, store$CompetitionOpenSinceMonth, sep = "-")),
Promo2Since = as.POSIXct(paste(store$Promo2SinceYear,store$Promo2SinceWeek, 1, sep = "-"),format = "%Y-%U-%u"))
# b. Remove redundant date variables
store <- dplyr::select(-c(Promo2SinceWeek, Promo2SinceYear, CompetitionOpenSinceMonth, CompetitionOpenSinceYear))
# b. Remove redundant date variables
store <- store %>% dplyr::select(-c(Promo2SinceWeek, Promo2SinceYear, CompetitionOpenSinceMonth, CompetitionOpenSinceYear))
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,  ggplot2,  lubridate,  plotly,   kableExtra,   zoo,   Scale,   forecast,   rpart,  caret,   e1071, pryr)
# Create html_df for later stlying
html_df <- function(x){ kable(x) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")}
# Import train.csv, test.csv and store.csv
train <- read.csv("train.csv", stringsAsFactors = F)
test <- read.csv("test.csv", stringsAsFactors = F)
store <- read.csv("store.csv", stringsAsFactors = F)
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday))
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday))
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
PromoInterval             = as.factor(PromoInterval),
CompetitionOpenSinceMonth = as.numeric(CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = as.numeric(CompetitionOpenSinceYear))
# a. Impute NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# b. Check if NA has been replaced:
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# Store
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# For CompetitionDistance, impute NA with mean of CompetitionDistance
store <- store %>%
mutate(CompetitionDistance= replace(CompetitionDistance, is.na(CompetitionDistance), mean(CompetitionDistance,na.rm=T)))
# For CompetitionOpenSinceMonth/Year + Promo2SinceYear/Weak: impute NA with median
store <- store %>%
mutate(CompetitionOpenSinceMonth=ifelse(is.na(CompetitionOpenSinceMonth),median(CompetitionOpenSinceMonth,na.rm=T), CompetitionOpenSinceMonth),
CompetitionOpenSinceYear=ifelse(is.na(CompetitionOpenSinceYear),median(CompetitionOpenSinceYear,na.rm=T), CompetitionOpenSinceYear),
Promo2SinceYear=ifelse(is.na(Promo2SinceYear),0, Promo2SinceYear),
Promo2SinceWeek=ifelse(is.na(Promo2SinceWeek),0, Promo2SinceWeek))
# Last check for NAs
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>%
row_spec(c(4,5,6,8,9), bold = T, color = "red")
## Find missing data ##
# Expected rows of records (1115 x 941 days) = 1,049,215  vs Actual = 1,017,209. Missing records = 33,121
# 1. Finding all combinations of stores and dates
allStoresAndDates <- expand.grid(unique(train.store$Store), unique(train.store$Date))
# a. Createnew date variables
store <- store %>%
mutate(CompetitionOpenSince = as.yearmon(paste(store$CompetitionOpenSinceYear, store$CompetitionOpenSinceMonth, sep = "-")),
Promo2Since = as.POSIXct(paste(store$Promo2SinceYear,store$Promo2SinceWeek, 1, sep = "-"),format = "%Y-%U-%u"))
# b. Remove redundant date variables
store <- store %>% dplyr::select(-c(Promo2SinceWeek, Promo2SinceYear, CompetitionOpenSinceMonth, CompetitionOpenSinceYear))
train.store <- merge(train, store, by = "Store")
test.store <- merge(test, store, by = "Store")
rm(store)
rm(test)
rm(train)
# Previous stored variables removed so only correct data set is used and to save space.
object_size(store)
# Check if closed stores have any sales. Result = no anomalies.
# train.store %>% filter(Open == 0) %>% select(Sales) %>% colSums()
# First plot
train.store %>% group_by(DayOfWeek, Open) %>% tally() %>%
ggplot(aes(x =DayOfWeek, y=n, fill = Open)) +
geom_bar(stat="identity")
ggplot(train.store, aes(x = Customers, y = Sales)) +
geom_point(aes(colour = StoreType)) + facet_wrap(~Assortment)
labs(title = "Customers and Sales")
ggplot(train.store, aes(x = Customers, y = Sales)) +
geom_point(aes(colour = Assortment)) +
labs(title = "Customers and Sales")
# Histogram for CompetitionOpenedSince
plot_ly(x= store$CompetitionOpenSince, type = "histogram") %>%
layout(title = "Distribution of CompetitionOpenedSince",
xaxis = list(title = "Year",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
# Histogram for CompetitionOpenedSince
plot_ly(x= train.store$CompetitionOpenSince, type = "histogram") %>%
layout(title = "Distribution of CompetitionOpenedSince",
xaxis = list(title = "Year",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
hist(as.numeric(as.POSIXct("2015-10-01", format = "%Y-%m-%d") - train.store$Promo2Since),
100, main = "Days since start of promo2")
# Histogram for Promo2Since (in days)
plot_ly(x= as.POSIXct("2015-10-01", format = "%Y-%m-%d") - store$Promo2Since, type = "histogram") %>%
layout(title = "Distribution of Promo2Since",
xaxis = list(title = "Days",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
# Histogram for Promo2Since (in days)
plot_ly(x= as.POSIXct("2015-10-01", format = "%Y-%m-%d") - train.store$Promo2Since, type = "histogram") %>%
layout(title = "Distribution of Promo2Since",
xaxis = list(title = "Days",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
hist(as.numeric(as.POSIXct("2015-10-01", format = "%Y-%m-%d") - train.store$Promo2Since),
100, main = "Days since start of promo2")
# Histogram for Promo2Since (in days)
plot_ly(x= as.POSIXct("2015-10-01", format = "%Y-%m-%d") - train.store$Promo2Since, type = "histogram") %>%
layout(title = "Distribution of Promo2Since",
xaxis = list(title = "Days",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
# Histogram for CompetitionOpenedSince
plot_ly(x= train.store$CompetitionOpenSince, type = "histogram") %>%
layout(title = "Distribution of CompetitionOpenedSince",
xaxis = list(title = "Year",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
