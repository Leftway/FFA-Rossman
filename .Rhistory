test <- read.csv("test.csv", stringsAsFactors = F)
store <- read.csv("store.csv", stringsAsFactors = F)
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday))
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday))
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
PromoInterval             = as.factor(PromoInterval),
CompetitionOpenSinceMonth = as.numeric(CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = as.numeric(CompetitionOpenSinceYear))
# a. Impute NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# b. Check if NA has been replaced:
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,
ggplot2,
lubridate,
plotly,
mice,
kableExtra,
zoo,
plotly,
Scale,
forecast,
rpart,
caret,
e1071,
MICE)
# Create html_df for later stlying
html_df <- function(x){
kable(x) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")}
# Create html_df for later stlying
html_df <- function(x){ kable(x) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")}
# a. Impute NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# b. Check if NA has been replaced:
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# Initialize mice algorithm where it use information from other variables in the dataset to predict and impute the missing values
init = mice(store, maxit = 0)
meth = init$method
predM = init$predictorMatrix
# Store ID variable does not have any predictive value, Select the BMI variable to not be included as predictor during imputation
predM[, c("Store")] = 0
# Specify methods for inputing values
meth[c("CompetitionOpenSinceMonth")]="norm"
meth[c("CompetitionOpenSinceYear")]="norm"
meth[c("Promo2SinceWeek")]="norm"
meth[c("Promo2SinceYear")]="norm"
# Run multiple imputation
set.seed(111)
imputed = mice(store, method=meth, predictorMatrix=predM, m=10)
# Replace store with inputed missing value dataset
store <- complete(imputed)
store$CompetitionOpenSinceMonth <- round(store$CompetitionOpenSinceMonth, digits = 0)
store$CompetitionOpenSinceYear <- round(store$CompetitionOpenSinceYear, digits = 0)
store$Promo2SinceWeek <- round(store$Promo2SinceWeek, digits = 0)
store$Promo2SinceYear <- round(store$Promo2SinceYear, digits = 0)
store <- store %>%
mutate(CompetitionOpenSinceMonth = replace(CompetitionOpenSinceMonth, CompetitionOpenSinceMonth<1, 1),
CompetitionOpenSinceMonth = replace(CompetitionOpenSinceMonth, CompetitionOpenSinceMonth>12, 12),
CompetitionOpenSinceYear = replace(CompetitionOpenSinceYear, CompetitionOpenSinceYear>2015, 2015),
Promo2SinceWeek = replace(Promo2SinceWeek, Promo2SinceWeek<1, 1),
Promo2SinceWeek = replace(Promo2SinceWeek, Promo2SinceWeek>50, 50),
Promo2SinceYear = replace(Promo2SinceYear, Promo2SinceYear<2009, 2009),
Promo2SinceYear = replace(Promo2SinceYear, Promo2SinceYear>2015, 2015)
)
# Last check for NAs
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>%
row_spec(c(4,5,6,8,9), bold = T, color = "red")
# a. Create new date variables
store <- store %>%
mutate(CompetitionOpenSince = as.yearmon(paste(store$CompetitionOpenSinceYear, store$CompetitionOpenSinceMonth, sep = "-")),
Promo2Since = as.POSIXct(paste(store$Promo2SinceYear,store$Promo2SinceWeek, 1, sep = "-"),format = "%Y-%U-%u"))
# P.S: yearmon functon creates a numeric vector interpreted in "years" and fractions of years. e.g. 1961.5 = June 1961.
# b. Remove redundant date variables
store <- store %>% dplyr::select(-c(Promo2SinceWeek, Promo2SinceYear, CompetitionOpenSinceMonth, CompetitionOpenSinceYear))
train.store <- merge(train, store, by = "Store")
test.store <- merge(test, store, by = "Store")
rm(store)
rm(test)
rm(train)
# Previous stored variables removed so only correct data set is used.
# Histogram for CompetitionOpenedSince
plot_ly(x= train.store$CompetitionOpenSince, type = "histogram") %>%
layout(title = "Distribution of CompetitionOpenedSince",
xaxis = list(title = "Year",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
View(train.store)
train.store %>% table()
train.store$CompetitionOpenSince %>% table()
train.store$CompetitionOpenSince %>% tally() %>% table()
train.store$CompetitionOpenSince %>% summary()
train.store$CompetitionOpenSince
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday),
Month                     = as.integer(format(Date, "%m"),
Year                      = as.integer(format(Date, "%y"),
Day                       = as.integer(format(Date, "%d"),
DayofYear                 = as.integer(as.POSIXlt(Date)$yday),
Week                      = as.integer( format(Date+3, "%U")) # Kenny is this correct?
#b. Test
test <- test %>% mutate(
DayofYear                 = as.integer(as.POSIXlt(Date)$yday),
#a. Train
train <- train %>% mutate(
#a. Train
train <- train %>% mutate(
#b. Test
test <- test %>% mutate(
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday),
Month                     = as.integer(format(Date, "%m"),
Year                      = as.integer(format(Date, "%y"),
Day                       = as.integer(format(Date, "%d"),
DayofYear                 = as.integer(as.POSIXlt(Date)$yday),
Week                      = as.integer( format(Date+3, "%U"))
train <- train %>% mutate(
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday),
Month                     = as.integer(format(Date, "%m"),
Year                      = as.integer(format(Date, "%y"),
Day                       = as.integer(format(Date, "%d"),
DayofYear                 = as.integer(as.POSIXlt(Date)$yday),
Week                      = as.integer(format(Date+3, "%U")))))) # Kenny is this correct?
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday),
Month                     = as.integer(format(Date, "%m"),
Year                      = as.integer(format(Date, "%y"),
Day                       = as.integer(format(Date, "%d"),
DayofYear                 = as.integer(as.POSIXlt(Date)$yday),
Week                      = as.integer(format(Date+3, "%U")))))) # Kenny is this correct?
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday),
Month                     = as.integer(format(Date, "%m"))
,
Year                      = as.integer(format(Date, "%y"),
Day                       = as.integer(format(Date, "%d"),
DayofYear                 = as.integer(as.POSIXlt(Date)$yday),
Week                      = as.integer(format(Date+3, "%U")))))) # Kenny is this correct?
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday),
Month                     = as.integer(format(Date, "%m"))
Year                      = as.integer(format(Date, "%y"),
DayOfWeek                 = as.factor(DayOfWeek),
#a. Train
train <- train %>% mutate(
#a. Train
train <- train %>% mutate(
train <- train %>% mutate(
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek)
Date                      = as.Date(Date),
train <- train %>% mutate(
train <- train %>% mutate
train <- train %>% mutate(
train <- train %>% mutate(
train <- train %>% mutate(
# Import train.csv, test.csv and store.csv
train <- read.csv("train.csv", stringsAsFactors = F)
test <- read.csv("test.csv", stringsAsFactors = F)
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,     ggplot2,       lubridate,             plotly,
mice,          kableExtra,    zoo,                   Scale,
forecast,      rpart,         caret,                 e1071,       MICE)
# Create html_df for later stlying
html_df <- function(x){
kable(x) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "left")}
# Create html_df for later stlying
html_df <- function(x){ kable(x) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")}
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,     ggplot2,       lubridate,             plotly,
mice,          kableExtra,    zoo,                   Scale,
forecast,      rpart,         caret,                 e1071,       MICE)
# Create html_df for later stlying
html_df <- function(x){ kable(x) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")}
# Import train.csv, test.csv and store.csv
train <- read.csv("train.csv", stringsAsFactors = F)
test <- read.csv("test.csv", stringsAsFactors = F)
store <- read.csv("store.csv", stringsAsFactors = F)
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday),
Month                     = as.integer(format(Date, "%m")),
Year                      = as.integer(format(Date, "%y")),
Day                       = as.integer(format(Date, "%d")),
DayofYear                 = as.integer(as.POSIXlt(Date)$yday),
Week                      = as.integer(format(Date+3, "%U"))) # Kenny is this correct?
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday),
Month                     = as.integer(format(Date, "%m"),
Year                      = as.integer(format(Date, "%y"),
Day                       = as.integer(format(Date, "%d"),
DayofYear                 = as.integer(as.POSIXlt(Date)$yday),
Week                      = as.integer( format(Date+3, "%U"))))))
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
PromoInterval             = as.factor(PromoInterval),
CompetitionOpenSinceMonth = as.numeric(CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = as.numeric(CompetitionOpenSinceYear))
View(train)
# a. Impute NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# b. Check if NA has been replaced:
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# Store
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# Histogram for CompetitionOpenedSince
plot_ly(x= train.store$CompetitionOpenSince, type = "histogram") %>%
layout(title = "Distribution of CompetitionOpenedSince",
xaxis = list(title = "Year",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
test.store <- merge(test, store, by = "Store")
train.store <- merge(train, store, by = "Store")
test.store <- merge(test, store, by = "Store")
rm(store)
rm(test)
rm(train)
# Previous stored variables removed so only correct data set is used.
# Histogram for CompetitionOpenedSince
plot_ly(x= train.store$CompetitionOpenSince, type = "histogram") %>%
layout(title = "Distribution of CompetitionOpenedSince",
xaxis = list(title = "Year",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
# Histogram for CompetitionOpenedSince
plot_ly(x= train.store$CompetitionOpenSince, type = "histogram") %>%
layout(title = "Distribution of CompetitionOpenedSince",
xaxis = list(title = "Year",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,     ggplot2,       lubridate,             plotly,
mice,          kableExtra,    zoo,                   Scale,
forecast,      rpart,         caret,                 e1071,       MICE)
# Create html_df for later stlying
html_df <- function(x){ kable(x) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")}
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,     ggplot2,       lubridate,             plotly,
mice,          kableExtra,    zoo,                   Scale,
forecast,      rpart,         caret,                 e1071,       mice)
# Create html_df for later stlying
html_df <- function(x){ kable(x) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")}
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,     ggplot2,       lubridate,             plotly,
mice,          kableExtra,    zoo,                   Scale,
forecast,      rpart,         caret,                 e1071,       mice)
# Create html_df for later stlying
html_df <- function(x){ kable(x) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")}
# Import train.csv, test.csv and store.csv
train <- read.csv("train.csv", stringsAsFactors = F)
test <- read.csv("test.csv", stringsAsFactors = F)
store <- read.csv("store.csv", stringsAsFactors = F)
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday),
Month                     = as.integer(format(Date, "%m")),
Year                      = as.integer(format(Date, "%y")),
Day                       = as.integer(format(Date, "%d")),
DayofYear                 = as.integer(as.POSIXlt(Date)$yday),
Week                      = as.integer(format(Date+3, "%U")))
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday),
Month                     = as.integer(format(Date, "%m"),
Year                      = as.integer(format(Date, "%y"),
Day                       = as.integer(format(Date, "%d"),
DayofYear                 = as.integer(as.POSIXlt(Date)$yday),
Week                      = as.integer( format(Date+3, "%U"))))))
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
PromoInterval             = as.factor(PromoInterval),
CompetitionOpenSinceMonth = as.numeric(CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = as.numeric(CompetitionOpenSinceYear))
View(train)
# Train
train %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# a. Impute NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# b. Check if NA has been replaced:
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
train.store <- merge(train, store, by = "Store")
test.store <- merge(test, store, by = "Store")
# rm(store)
# rm(test)
# rm(train)
# Previous stored variables removed so only correct data set is used.
# Histogram for CompetitionOpenedSince
plot_ly(x= train.store$CompetitionOpenSince, type = "histogram") %>%
layout(title = "Distribution of CompetitionOpenedSince",
xaxis = list(title = "Year",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
# a. Create new date variables
store <- store %>%
mutate(CompetitionOpenSince = as.yearmon(paste(store$CompetitionOpenSinceYear, store$CompetitionOpenSinceMonth, sep = "-")),
Promo2Since = as.POSIXct(paste(store$Promo2SinceYear,store$Promo2SinceWeek, 1, sep = "-"),format = "%Y-%U-%u"))
# P.S: yearmon functon creates a numeric vector interpreted in "years" and fractions of years. e.g. 1961.5 = June 1961.
# b. Remove redundant date variables
store <- store %>% dplyr::select(-c(Promo2SinceWeek, Promo2SinceYear, CompetitionOpenSinceMonth, CompetitionOpenSinceYear))
train.store <- merge(train, store, by = "Store")
test.store <- merge(test, store, by = "Store")
# rm(store)
# rm(test)
# rm(train)
# Previous stored variables removed so only correct data set is used.
# Histogram for CompetitionOpenedSince
plot_ly(x= train.store$CompetitionOpenSince, type = "histogram") %>%
layout(title = "Distribution of CompetitionOpenedSince",
xaxis = list(title = "Year",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
# Initialize mice algorithm where it use information from other variables in the dataset to predict and impute the missing values
init = mice(store, maxit = 0)
meth = init$method
predM = init$predictorMatrix
# Store ID variable does not have any predictive value, Select the BMI variable to not be included as predictor during imputation
predM[, c("Store")] = 0
# Specify methods for inputing values
meth[c("CompetitionOpenSinceMonth")]="norm"
meth[c("CompetitionOpenSinceYear")]="norm"
meth[c("Promo2SinceWeek")]="norm"
meth[c("Promo2SinceYear")]="norm"
# Run multiple imputation
set.seed(111)
imputed = mice(store, method=meth, predictorMatrix=predM, m=10)
# Initialize mice algorithm where it use information from other variables in the dataset to predict and impute the missing values
init = mice(store, maxit = 0)
meth = init$method
predM = init$predictorMatrix
# Store ID variable does not have any predictive value, Select the BMI variable to not be included as predictor during imputation
predM[, c("Store")] = 0
# Specify methods for inputing values
meth[c("CompetitionOpenSinceMonth")]="norm"
meth[c("CompetitionOpenSinceYear")]="norm"
meth[c("Promo2SinceWeek")]="norm"
meth[c("Promo2SinceYear")]="norm"
# Run multiple imputation
set.seed(111)
imputed = mice(store, method=meth, predictorMatrix=predM, m=10)
# Import train.csv, test.csv and store.csv
train <- read.csv("train.csv", stringsAsFactors = F)
test <- read.csv("test.csv", stringsAsFactors = F)
store <- read.csv("store.csv", stringsAsFactors = F)
# a. Impute NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# b. Check if NA has been replaced:
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# Install & load relevant libraries.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,     ggplot2,       lubridate,             plotly,
mice,          kableExtra,    zoo,                   Scale,
forecast,      rpart,         caret,                 e1071,       mice)
# Create html_df for later stlying
html_df <- function(x){ kable(x) %>% kable_styling(bootstrap_options = "striped", full_width = F, position = "left")}
# a. Impute NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# b. Check if NA has been replaced:
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# Initialize mice algorithm where it use information from other variables in the dataset to predict and impute the missing values
init = mice(store, maxit = 0)
meth = init$method
predM = init$predictorMatrix
# Store ID variable does not have any predictive value, Select the BMI variable to not be included as predictor during imputation
predM[, c("Store")] = 0
# Specify methods for inputing values
meth[c("CompetitionOpenSinceMonth")]="norm"
meth[c("CompetitionOpenSinceYear")]="norm"
meth[c("Promo2SinceWeek")]="norm"
meth[c("Promo2SinceYear")]="norm"
# Run multiple imputation
set.seed(111)
imputed = mice(store, method=meth, predictorMatrix=predM, m=10)
# Replace store with inputed missing value dataset
store <- complete(imputed)
store$CompetitionOpenSinceMonth <- round(store$CompetitionOpenSinceMonth, digits = 0)
store$CompetitionOpenSinceYear <- round(store$CompetitionOpenSinceYear, digits = 0)
store$Promo2SinceWeek <- round(store$Promo2SinceWeek, digits = 0)
store$Promo2SinceYear <- round(store$Promo2SinceYear, digits = 0)
store <- store %>%
mutate(CompetitionOpenSinceMonth = replace(CompetitionOpenSinceMonth, CompetitionOpenSinceMonth<1, 1),
CompetitionOpenSinceMonth = replace(CompetitionOpenSinceMonth, CompetitionOpenSinceMonth>12, 12),
CompetitionOpenSinceYear = replace(CompetitionOpenSinceYear, CompetitionOpenSinceYear>2015, 2015),
Promo2SinceWeek = replace(Promo2SinceWeek, Promo2SinceWeek<1, 1),
Promo2SinceWeek = replace(Promo2SinceWeek, Promo2SinceWeek>50, 50),
Promo2SinceYear = replace(Promo2SinceYear, Promo2SinceYear<2009, 2009),
Promo2SinceYear = replace(Promo2SinceYear, Promo2SinceYear>2015, 2015)
)
# Last check for NAs
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>%
row_spec(c(4,5,6,8,9), bold = T, color = "red")
# a. Create new date variables
store <- store %>%
mutate(CompetitionOpenSince = as.yearmon(paste(store$CompetitionOpenSinceYear, store$CompetitionOpenSinceMonth, sep = "-")),
Promo2Since = as.POSIXct(paste(store$Promo2SinceYear,store$Promo2SinceWeek, 1, sep = "-"),format = "%Y-%U-%u"))
# P.S: yearmon functon creates a numeric vector interpreted in "years" and fractions of years. e.g. 1961.5 = June 1961.
# b. Remove redundant date variables
store <- store %>% dplyr::select(-c(Promo2SinceWeek, Promo2SinceYear, CompetitionOpenSinceMonth, CompetitionOpenSinceYear))
train.store <- merge(train, store, by = "Store")
test.store <- merge(test, store, by = "Store")
# rm(store)
# rm(test)
# rm(train)
# Previous stored variables removed so only correct data set is used.
# Histogram for CompetitionOpenedSince
plot_ly(x= train.store$CompetitionOpenSince, type = "histogram") %>%
layout(title = "Distribution of CompetitionOpenedSince",
xaxis = list(title = "Year",
zeroline = FALSE),
yaxis = list(title = "Count",
zeroline = FALSE))
# MeanSales by CompetitionDistance
salesbydist <- train.store %>% group_by(CompetitionDistance) %>% summarise(MeanSales = mean(Sales, na.rm=TRUE))
## NOTE: Plotting without mean makes everthing too cluttered. Code below can't see shit. Followed online guide.
## ggplot(train.store, aes(x = CompetitionDistance, y = Sales)) + geom_point() + geom_smooth()
# salesbydist scatterplot
ggplot(salesbydist, aes(x = CompetitionDistance, y = MeanSales)) +
geom_point() + geom_smooth() + scale_x_log10() + scale_y_log10()
