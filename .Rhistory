store %>% ggplot(aes (x= CompetitionOpenSinceMonth, na.rm = TRUE)) +
geom_bar()
# Check distribution  of months (#Need factor to better represent months)
store %>%  drop_na(store %>% )ggplot(aes (x= CompetitionOpenSinceMonth)) +
# Check distribution  of months (#Need factor to better represent months)
store %>%  drop_na(store %>% ggplot(aes (x= CompetitionOpenSinceMonth)) +
# Check distribution  of months (#Need factor to better represent months)
store %>%  drop_na(store) %>% ggplot(aes (x= CompetitionOpenSinceMonth)) +
geom_bar()
# Check distribution  of months (#Need factor to better represent months)
store %>%  drop_na(store) %>% ggplot(aes (x= CompetitionOpenSinceMonth)) +
# Check distribution  of months (#Need factor to better represent months)
store %>%  drop_na(store) %>% ggplot(aes (x= CompetitionOpenSinceMonth)) +
geom_bar()
# Check distribution  of months (#Need factor to better represent months)
store %>%  drop_na(store) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar()
# Check distribution  of months (#Need factor to better represent months)
store %>%  drop_na(store$CompetitionOpenSinceMonth) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar()
store %>%  drop_na(store$CompetitionOpenSinceMonth)
# Check distribution  of months (#Need factor to better represent months)
store %>%  drop_na(store) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar()
str(store)
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar()
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar() + ylabel("test")
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar() + ylab("test")
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar() + ylab("Count")
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar() fill = ifelse(CompetitionOpenSinceMonthh == 9,
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar( fill = ifelse(CompetitionOpenSinceMonthh == 9,
rgb(250, 150, 30, maxColorValue = 255),
"black"))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar( fill = ifelse(CompetitionOpenSinceMonth == 9,
rgb(250, 150, 30, maxColorValue = 255),
"black"))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar( fill = ifelse(CompetitionOpenSinceMonth == 9,
rgb(250, 150, 30, maxColorValue = 255),
"black"))
str(store)
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar( fill = ifelse(CompetitionOpenSinceMonth == 9,
rgb(250, 150, 30, maxColorValue = 255),
"black"))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(fill = if(CompetitionOpenSinceMonth == 9,
geom_bar(fill = if(CompetitionOpenSinceMonth == 9 {rgb(250, 150, 30)}
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(fill = if(CompetitionOpenSinceMonth == 9 {rgb(250, 150, 30)}))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(fill = if(CompetitionOpenSinceMonth == 9) {rgb(250, 150, 30)})
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(fill = red)
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(fill = "white")
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(stat = "identity", fill = ifelse(CompetitionOpenSinceMonth))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(stat = "identity", inherit.aes = F, fill = ifelse(CompetitionOpenSinceMonth))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(stat = "identity", fill = ifelse(CompetitionOpenSinceMonth))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(aes(colour = CompetitionOpenSinceMonth))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(aes(fill = CompetitionOpenSinceMonth))
geom_bar(aes(fill = ifelse(CompetitionOpenSinceMonth == 9, "Red", "Black"))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(aes(fill = ifelse(CompetitionOpenSinceMonth == 9, "Red", "Black")))
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(aes(fill = ifelse(CompetitionOpenSinceMonth == 9, rgb(250, 150, 30, maxColorValue = 255), "Black")))
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(fill = ifelse(CompetitionOpenSinceMonth == 9, rgb(250, 150, 30, maxColorValue = 255), "Black"))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(aes(fill = ifelse(CompetitionOpenSinceMonth == 9, "Highest")))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(aes(fill = ifelse(CompetitionOpenSinceMonth == 9, "Highest", .)))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(aes(fill = ifelse(CompetitionOpenSinceMonth == 9, "Highest", ".")))
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(aes(fill = ifCompetitionOpenSinceMonth == 9, "Highest")))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(aes(fill = ifCompetitionOpenSinceMonth == 9, "Highest"))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(aes(fill = if(CompetitionOpenSinceMonth == 9), {"Highest"}))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(aes(fill = if(CompetitionOpenSinceMonth == 9) {"Highest"}))
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar()
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(fill = "tomato3")
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar(stat = "identity", fill = "tomato3")
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar( fill = "tomato3")
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)) +
geom_bar( color=ifelse(CompetitionOpenSinceMonth ==9, 'red', 'black'))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth), fill = CompetitionOpenSinceMonth) +
geom_bar( color=ifelse(CompetitionOpenSinceMonth ==9, 'red', 'black'))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth), fill = CompetitionOpenSinceMonth) +
geom_bar()
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth), fill = CompetitionOpenSinceMonth) +
geom_bar()
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth),
= CompetitionOpenSinceMonth) +
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth),
= CompetitionOpenSinceMonth) +geom_bar()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth), fill = CompetitionOpenSinceMonth) +
geom_bar()
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth), fill = CompetitionOpenSinceMonth) + geom_bar() +
scale_fill_manual("Legend", values = c("9" = "Red", "Rest" = "Black"))
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)+ geom_bar() +
scale_fill_manual("Legend", values = c("9" = "Red", "Rest" = "Black"))
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)+ geom_bar() + scale_fill_manual("Legend", values = c("9" = "Red", "Rest" = "Black"))
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth))+ geom_bar() + scale_fill_manual("Legend", values = c("9" = "Red", "Rest" = "Black"))
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth) + fill = CompetitionOpenSinceMonth )+ geom_bar() + scale_fill_manual("Legend", values = c("9" = "Red", "Rest" = "Black"))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth) , fill = CompetitionOpenSinceMonth))+ geom_bar() + scale_fill_manual("Legend", values = c("9" = "Red", "Rest" = "Black"))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth) , fill = CompetitionOpenSinceMonth)+ geom_bar() + scale_fill_manual("Legend", values = c("9" = "Red", "Rest" = "Black"))
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth , fill = CompetitionOpenSinceMonth)+ geom_bar() + scale_fill_manual("Legend", values = c("9" = "Red", "Rest" = "Black"))
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth , fill = CompetitionOpenSinceMonth))+ geom_bar() + scale_fill_manual("Legend", values = c("9" = "Red", "Rest" = "Black"))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth , fill = CompetitionOpenSinceMonth))+ geom_bar()
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth , fill = CompetitionOpenSinceMonth))+ geom_bar()
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth , fill = CompetitionOpenSinceMonth))+ geom_bar() + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth , fill = CompetitionOpenSinceMonth))+ geom_bar() +
scale_fill_manual(values=c("#999999", "#999999", "#999999","#999999","#999999","#999999","#999999", "#999999" "#E69F00", "#999999", "#999999","#999999"))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth , fill = CompetitionOpenSinceMonth))+ geom_bar() +
scale_fill_manual(values=c("#999999", "#999999", "#999999","#999999","#999999","#999999","#999999", "#999999" "#E69F00",  "#999999", "#999999","#999999"))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth , fill = CompetitionOpenSinceMonth))+ geom_bar() +
scale_fill_manual(values=c("#999999", "#999999", "#999999","#999999","#999999","#999999","#999999", "#999999" "#999999",  "#999999", "#999999","#999999"))
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth , fill = CompetitionOpenSinceMonth))+ geom_bar() +
scale_fill_manual(values=c("black", "black", "black", "black","black","black","black", "black", "red", "black", "black","black"))
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth , fill = CompetitionOpenSinceMonth))+ geom_bar() +
scale_fill_manual(values=c("black", "black", "black", "black","black","black","black", "black", "red", "black", "black","black")) +
+ scale_fill_discrete(guide=FALSE)
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth , fill = CompetitionOpenSinceMonth))+ geom_bar() +
scale_fill_manual(values=c("black", "black", "black", "black","black","black","black", "black", "red", "black", "black","black")) +
scale_fill_discrete(guide=FALSE)
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth , fill = CompetitionOpenSinceMonth))+ geom_bar() +
scale_fill_manual(values=c("black", "black", "black", "black","black","black","black", "black", "red", "black", "black","black"))
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth , fill = CompetitionOpenSinceMonth))+ geom_bar(show.legend = F) +
scale_fill_manual(values=c("black", "black", "black", "black","black","black","black", "black", "red", "black", "black","black"))
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need month factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth)+ geom_bar(show.legend = F) +
scale_fill_manual(values=c("black", "black", "black", "black","black","black","black", "black", "red", "black", "black","black"))
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need month factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth))+ geom_bar(show.legend = F) +
scale_fill_manual(values=c("black", "black", "black", "black","black","black","black", "black", "red", "black", "black","black"))
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need month factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth , fill = CompetitionOpenSinceMonth))+ geom_bar(show.legend = F) +
scale_fill_manual(values=c("black", "black", "black", "black","black","black","black", "black", "red", "black", "black","black"))
# Check distribution  of years
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need month factor to better represent months)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth , fill = CompetitionOpenSinceMonth))+ geom_bar(show.legend = F) +
scale_fill_manual(values=c("black", "black", "black", "black","black","black","black", "black", "red", "black", "black","black"))
# Check distribution  of years
store %>%  filter(!is.na(CompetitionOpenSinceYear)) %>% ggplot(aes(x= CompetitionOpenSinceYear , fill = CompetitionOpenSinceYear))+ geom_bar()
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Check distribution  of months (#Need month factor to better represent months)
monthcolors = c("black", "black", "black", "black","black","black","black", "black", "red", "black", "black","black")
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth , fill = CompetitionOpenSinceMonth))+ geom_bar(show.legend = F) +
scale_fill_manual(values= monthcolors)
# Check distribution  of years
store %>%  filter(!is.na(CompetitionOpenSinceYear)) %>% ggplot(aes(x= CompetitionOpenSinceYear , fill = CompetitionOpenSinceYear))+ geom_bar()
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth , fill = CompetitionOpenSinceMonth))+ geom_bar(show.legend = F) +
scale_fill_manual(values= monthcolors)
store %>%  filter(!is.na(CompetitionOpenSinceMonth)) %>% ggplot(aes(x= CompetitionOpenSinceMonth , fill = CompetitionOpenSinceMonth))+ geom_bar(show.legend = F) +
scale_fill_manual(values= monthcolors) +
labs(title = "Distribution of CompetitionOpenSinceMonth")
# Check distribution  of years
store %>%  filter(!is.na(CompetitionOpenSinceYear)) %>% ggplot(aes(x= CompetitionOpenSinceYear , fill = CompetitionOpenSinceYear))+ geom_bar() + labs(title = "Distribution of CompetitionOpenSinceYear") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Check distribution  of years
yearcolors =c("black", "black", "black", "black","black", "black", "black", "black", "black","black", "black", "black", "black", "black","black", "black", "black", "black", "black","black", "black", "black", "black", "black","black", "red", "black", "black")
b
# Check distribution  of years
yearcolors =c("black", "black", "black", "black","black", "black", "black", "black", "black","black", "black", "black", "black", "black","black", "black", "black", "black", "black","black", "black", "black", "black", "black","black", "red", "black", "black")
store %>%  filter(!is.na(CompetitionOpenSinceYear)) %>% ggplot(aes(x= CompetitionOpenSinceYear , fill = CompetitionOpenSinceYear))+ geom_bar() + labs(title = "Distribution of CompetitionOpenSinceYear") + scale_fill_manual(values= yearcolors)
store %>%  filter(!is.na(CompetitionOpenSinceYear)) %>% ggplot(aes(x= CompetitionOpenSinceYear , fill = CompetitionOpenSinceYear))+ geom_bar() + labs(title = "Distribution of CompetitionOpenSinceYear") + scale_fill_manual(values= yearcolors)+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Check distribution  of years
yearcolors =c("black", "black", "black", "black","black", "black", "black", "black", "black","black", "black", "black", "black", "black","black", "black", "black", "black", "black","black", "red", "black", "black")
store %>%  filter(!is.na(CompetitionOpenSinceYear)) %>% ggplot(aes(x= CompetitionOpenSinceYear , fill = CompetitionOpenSinceYear))+ geom_bar() + labs(title = "Distribution of CompetitionOpenSinceYear") + scale_fill_manual(values= yearcolors)+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
store %>%  filter(!is.na(CompetitionOpenSinceYear)) %>% ggplot(aes(x= CompetitionOpenSinceYear , fill = CompetitionOpenSinceYear))+ geom_bar(show.legend = F) + labs(title = "Distribution of CompetitionOpenSinceYear") + scale_fill_manual(values= yearcolors)+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Impute NA with month = September, Year = 2013   #$$%#%#^ Unsure if this imputation is the best #$$%#%#^
store <- store %>%
mutate(CompetitionOpenSinceMonth = ifelse(is.na(CompetitionOpenSinceMonth), CompetitionOpenSinceMonth == 9, CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = ifelse(is.na(CompetitionOpenSinceYear, CompetitionOpenSinceYear == 2013, CompetitionOpenSinceYear)))
# Impute NA with month = September, Year = 2013   #$$%#%#^ Unsure if this imputation is the best #$$%#%#^
store <- store %>%
mutate(CompetitionOpenSinceMonth = ifelse(is.na(CompetitionOpenSinceMonth), CompetitionOpenSinceMonth == 9, CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = ifelse(is.na(CompetitionOpenSinceYear), CompetitionOpenSinceYear == 2013, CompetitionOpenSinceYear))
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Impute NA with month = September, Year = 2013   #$$%#%#^ Unsure if this imputation is the best #$$%#%#^
store <- store %>%
mutate(CompetitionOpenSinceMonth = ifelse(is.na(CompetitionOpenSinceMonth), CompetitionOpenSinceMonth == 9, CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = ifelse(is.na(CompetitionOpenSinceYear), CompetitionOpenSinceYear == 2013, CompetitionOpenSinceYear))
# Impute NA with month = September, Year = 2013   #$$%#%#^ Unsure if this imputation is the best #$$%#%#^
store <- store %>%
mutate(CompetitionOpenSinceMonth = ifelse(is.na(CompetitionOpenSinceMonth), CompetitionOpenSinceMonth = 9, CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = ifelse(is.na(CompetitionOpenSinceYear), CompetitionOpenSinceYear = 2013, CompetitionOpenSinceYear))
# Impute NA with month = September, Year = 2013   #$$%#%#^ Unsure if this imputation is the best #$$%#%#^
store <- store %>%
mutate(CompetitionOpenSinceMonth = ifelse(is.na(CompetitionOpenSinceMonth), CompetitionOpenSinceMonth == 9, CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = ifelse(is.na(CompetitionOpenSinceYear), CompetitionOpenSinceYear == 2013, CompetitionOpenSinceYear))
# Impute NA with mean of CompetitionDistance
store <- store %>%
mutate(CompetitionDistance= ifelse(is.na(CompetitionDistance), mean(CompetitionDistance,na.rm=T), CompetitionDistance))
# Check for NAs
store %>% filter(is.na(CompetitionDistance)) %>% nrow()
# Impute NA with month = September, Year = 2013   #$$%#%#^ Unsure if this imputation is the best #$$%#%#^
store <- store %>%
mutate(CompetitionOpenSinceMonth = ifelse(is.na(CompetitionOpenSinceMonth), CompetitionOpenSinceMonth == 9, CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = ifelse(is.na(CompetitionOpenSinceYear), CompetitionOpenSinceYear == 2013, CompetitionOpenSinceYear))
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
store %>%  filter(!is.na(CompetitionOpenSinceYear)) %>% ggplot(aes(x= CompetitionOpenSinceYear , fill = CompetitionOpenSinceYear))+ geom_bar(show.legend = F)  + scale_fill_manual(values= yearcolors)+
labs(title = "Distribution of CompetitionOpenSinceYear") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
store %>%  filter(!is.na(CompetitionOpenSinceYear)) %>% ggplot(aes(x= CompetitionOpenSinceYear , fill = CompetitionOpenSinceYear))+ geom_bar(show.legend = F)  + scale_fill_manual(values= yearcolors)+
labs(title = "Distribution of CompetitionOpenSinceYear") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Check distribution  of years
yearcolors =c("black", "black", "black", "black","black", "black", "black", "black", "black","black", "black", "black", "black", "black","black", "black", "black", "black", "black","black", "red", "black", "black")
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Store
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
store %>% filter(is.na(CompetitionOpenSinceMonth))
# Impute NA with month = September, Year = 2013   #$$%#%#^ Unsure if this imputation is the best #$$%#%#^
store <- store %>%
mutate(CompetitionOpenSinceMonth = ifelse(is.na(CompetitionOpenSinceMonth), CompetitionOpenSinceMonth == "9", CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = ifelse(is.na(CompetitionOpenSinceYear), CompetitionOpenSinceYear == 2013, CompetitionOpenSinceYear))
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
store <- store %>%
mutate(CompetitionOpenSinceMonth = replace(CompetitionOpenSinceMonth, is.na(CompetitionOpenSinceMonth),9),
CompetitionOpenSinceYear  = replace(CompetitionOpenSinceYear, is.na(CompetitionOpenSinceYear),2013))
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Impute NA with mean of CompetitionDistance
store <- store %>%
mutate(CompetitionDistance= replace(CompetitionDistance, is.na(CompetitionDistance),mean(CompetitionDistance,na.rm=T)))
# Check for NAs
store %>% filter(is.na(CompetitionDistance)) %>% nrow()
# Import train.csv, test.csv and store.csv
train <- read.csv("train.csv", stringsAsFactors = F)
test <- read.csv("test.csv", stringsAsFactors = F)
store <- read.csv("store.csv", stringsAsFactors = F)
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday))
str(train)
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday))
str(test)
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
PromoInterval             = as.factor(PromoInterval),
CompetitionOpenSinceMonth = as.factor(CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = as.factor(CompetitionOpenSinceYear))
str(store)
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% filter(is.na(CompetitionOpenSinceMonth)) %>% nrow()
# Store
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# Impute NA with median   #$$%#%#^ Unsure if this imputation is the best #$$%#%#^
store <- store %>%
mutate(CompetitionOpenSinceMonth=ifelse(is.na(CompetitionOpenSinceMonth),median(CompetitionOpenSinceMonth,na.rm=T), CompetitionOpenSinceMonth),
CompetitionOpenSinceYear=ifelse(is.na(CompetitionOpenSinceYear),median(CompetitionOpenSinceYear,na.rm=T), CompetitionOpenSinceYear),
Promo2SinceYear=ifelse(is.na(Promo2SinceYear),0, Promo2SinceYear),
Promo2SinceWeek=ifelse(is.na(Promo2SinceWeek),0, Promo2SinceWeek))
#a. Train
train <- train %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Has 4 values!
SchoolHoliday             = as.factor(SchoolHoliday))
str(train)
#b. Test
test <- test %>% mutate(
DayOfWeek                 = as.factor(DayOfWeek),
Date                      = as.Date(Date),
Open                      = as.factor(Open),
Promo                     = as.factor(Promo),
StateHoliday              = as.factor(StateHoliday),   # Only 2 values! What're the state holidays?
SchoolHoliday             = as.factor(SchoolHoliday))
str(test)
#c. Store
store <- store %>% mutate(
StoreType                 = as.factor(StoreType),
Assortment                = as.factor(Assortment),
Promo2                    = as.factor(Promo2),
PromoInterval             = as.factor(PromoInterval),
CompetitionOpenSinceMonth = as.numeric(CompetitionOpenSinceMonth),
CompetitionOpenSinceYear  = as.numeric(CompetitionOpenSinceYear))
str(store)
# Impute NA with median   #$$%#%#^ Unsure if this imputation is the best #$$%#%#^
store <- store %>%
mutate(CompetitionOpenSinceMonth=ifelse(is.na(CompetitionOpenSinceMonth),median(CompetitionOpenSinceMonth,na.rm=T), CompetitionOpenSinceMonth),
CompetitionOpenSinceYear=ifelse(is.na(CompetitionOpenSinceYear),median(CompetitionOpenSinceYear,na.rm=T), CompetitionOpenSinceYear),
Promo2SinceYear=ifelse(is.na(Promo2SinceYear),0, Promo2SinceYear),
Promo2SinceWeek=ifelse(is.na(Promo2SinceWeek),0, Promo2SinceWeek))
# Store
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# b. Check if NA has been replaced:
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# a. Impute NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# b. Check if NA has been replaced:
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# b. Check if NA has been replaced:
sum(is.na(test$Open))
# Train
train %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# a. Impute NA with Open = 1
test <- test %>% mutate(Open = replace(Open, is.na(Open),1))
# b. Check if NA has been replaced:
test %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>% row_spec(5, bold = T, color = "red")
# Check no. of NAs for CompetitionOpenSinceMonth/Year
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df
# Check for NAs
store %>% filter(is.na(CompetitionDistance)) %>% nrow()
# Impute NA with mean of CompetitionDistance
store <- store %>%
mutate(CompetitionDistance= replace(CompetitionDistance, is.na(CompetitionDistance), mean(CompetitionDistance,na.rm=T)))
# Last check for NAs
store %>% is.na() %>% colSums() %>% data.frame() %>% `colnames<-`("No. of NAs") %>% html_df %>%
row_spec(c(4,5,6,8,9), bold = T, color = "red")
train.store <- merge(train, store, by = "Store")
test.store <- merge(test, store, by = "Store")
# PromotionInterval
ggplot(train.store, aes(x = factor(PromoInterval), y = Sales, color = PromoInterval)) +
geom_col() +
ggtitle("Sales by PromoInterval")
# PromotionInterval
ggplot(train.store, aes(x = factor(PromoInterval), y = Sales, color = PromoInterval)) +
geom_col() +
ggtitle("Sales by PromoInterval")
# PromotionInterval
ggplot(train.store, aes(x = factor(PromoInterval), y = Sales, color = PromoInterval)) +
geom_col() +
ggtitle("Sales by PromoInterval")
# PromotionInterval
ggplot(train.store, aes(x = factor(PromoInterval), y = Sales, color = PromoInterval)) +
geom_col() +
ggtitle("Sales by PromoInterval")
